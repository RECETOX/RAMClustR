pch=19)
points(ba$MZ, (ba$MZ - round(ba$MZ)),
pch=19, col=2, pch=0.2)
points(ba$MZ, (ba$MZ - round(ba$MZ)),
pch=19, col=2, cex=0.2)
getwd()
pdf("fractionalMass.pdf", useDingbats=FALSE)
plot(cmpds$mw, (cmpds$mw-round(cmpds$mw)),
xlab="mw",
ylab="fractional mass",
main="HMDB mass defect",
pch=19)
ba<-read.csv("C:/Users/pmflab/Desktop/MMA_NEW_20170801/Curve1_Results_0/func001_exc.csv", header=TRUE, check.names=FALSE)
plot(ba$MZ, (ba$MZ - round(ba$MZ)),
pch=19, col=2, cex=0.5)
dev.off()
tiff("fractionalMass.tiff")
plot(cmpds$mw, (cmpds$mw-round(cmpds$mw)),
xlab="mw",
ylab="fractional mass",
main="HMDB mass defect",
pch=19)
ba<-read.csv("C:/Users/pmflab/Desktop/MMA_NEW_20170801/Curve1_Results_0/func001_exc.csv", header=TRUE, check.names=FALSE)
points(ba$MZ, (ba$MZ - round(ba$MZ)),
pch=19, col=2, cex=0.2)
dev.off()
head(ba)
dim(ba)
head(cmpds)
jpg("HMDB_MassDefect.jpg")
plot(cmpds$mw, (cmpds$mw-round(cmpds$mw)),
xlab="mw",
ylab="fractional mass",
main="HMDB mass defect",
pch=19, cex=0.2)
dev.off()
jpg("HMDB_MassDefect.jpg")
jpeg("HMDB_MassDefect.jpg")
plot(cmpds$mw, (cmpds$mw-round(cmpds$mw)),
xlab="mw",
ylab="fractional mass",
main="HMDB mass defect",
pch=19, cex=0.2)
dev.off()
jpeg("HMDB_MassDefect.jpg")
plot(cmpds$mw, (cmpds$mw-round(cmpds$mw)),
xlab="mw",
ylab="Mass Defect",
main="HMDB mass defect (round)",
pch=19, cex=0.2)
dev.off()
jpeg("HMDB_FractionalMass.jpg")
plot(cmpds$mw, (cmpds$mw-floor(cmpds$mw)),
xlab="mw",
ylab="Fractional Mass",
main="HMDB Fractional Mass (floor)",
pch=19, cex=0.2)
dev.off()
plot(cmpds$mw, (cmpds$mw/1.0011178 -round(cmpds$mw/1.0011178)),
xlab="mw",
ylab="Fractional Mass",
main="HMDB Fractional Mass (floor)",
pch=19, cex=0.2)
plot(cmpds$mw, (cmpds$mw/1.0011178 -floor(cmpds$mw/1.0011178)),
xlab="mw",
ylab="Fractional Mass",
main="HMDB Fractional Mass (floor)",
pch=19, cex=0.2)
plot(cmpds$mw, (floor(cmpds$mw/1.0011178) - cmpds$mw/1.0011178),
xlab="mw",
ylab="Fractional Mass",
main="HMDB Fractional Mass (floor)",
pch=19, cex=0.2)
plot(cmpds$mw, (round(cmpds$mw/1.0011178) - cmpds$mw/1.0011178),
xlab="mw",
ylab="Fractional Mass",
main="HMDB Fractional Mass (floor)",
pch=19, cex=0.2)
plot(cmpds$mw, (floor(cmpds$mw/1.0011178) - cmpds$mw/1.0011178),
xlab="mw",
ylab="Fractional Mass",
main="HMDB Fractional Mass (floor)",
pch=19, cex=0.2)
version()
session.info()
sessionInfo()
library(tm)
library(enviPat)
??enviPat
data(isotopes)
pattern<-isopattern(
isotopes,
"C100H200S2Cl5",
threshold=0.1,
plotit=TRUE,
charge=FALSE,
emass=0.00054858,
algo=1
)
plot(pattern, xlim=(1644, 1646))
plot(pattern, xlim=c(1644, 1646))
pattern
pattern<-isopattern(
isotopes,
"C100H200S2Cl5",
threshold=0.01,
plotit=TRUE,
charge=FALSE,
emass=0.00054858,
algo=1
)
plot(pattern, xlim=c(1644, 1646))
c(1644, 1646)
plot(pattern, xlim=c(1644, 1646))
plot(pattern
)
plot(pattern[,1], pattern[,2] xlim=c(1644, 1646))
plot(pattern[,1], pattern[,2], xlim=c(1644, 1646))
pattern[,1]
pattern
plot(pattern[[1]][,1], pattern[[1]][,2], xlim=c(1644, 1646))
plot(pattern[[1]][,1], pattern[[1]][,2], xlim=c(1644, 1646), type="h")
plot(pattern[[1]][,1], pattern[[1]][,2], xlim=c(1644.3, 1646.5), type="h")
plot(pattern[[1]][,1], pattern[[1]][,2], xlim=c(1644.3, 1644.5), type="h")
library(mzR)
?mzR
library(mzXML)
install.packages("mzML")
??mzR
??mzR
??mzR
?mzR
devtools::install_github("cbroeckl/RAMClustR")
library(RAMClustR)
??ramclustR
devtools::install_github("cbroeckl/RAMClustR", build_vignettes = TRUE, dependencies = TRUE)
library(RAMClustR)
?ramclustR
library(RAMClustR)
?ramclustR
?do.findmain
library(RAMClustR)
?ramclustR
?do.findmain
??ramclusteR
??ramclustR
?defineExperiment
install_github("cbroeckl/RAMClustR", build_vignettes = TRUE, dependencies = TRUE)
devtools::install_github("cbroeckl/RAMClustR", build_vignettes = TRUE, dependencies = TRUE)
vignette(RAMClustR)
vignette("RAMClustR")
sessionInfo()
library(RAMClustR)
?findmass
grep("p", "positive")
grep("n", "positive")
grepl("n", "positive")
grepl("n", "negative")
devtools::install_github("cbroeckl/RAMClustR", build_vignettes = TRUE)
if(is.null(mat.dir)) {
mat.dir = paste0(getwd(), "/spectra/mat")
}
ramclustObj = RC
mat.dir = NULL
msp.dir = NULL
if(is.null(mat.dir)) {
mat.dir = paste0(getwd(), "/spectra/mat")
}
if(is.null(msp.dir)) {
msp.dir = paste0(getwd(), "/spectra/msp")
}
usemat = TRUE
usemsp = TRUE
if(!dir.exists(mat.dir)) {
usemat = FALSE
}
if(!dir.exists(msp.dir)) {
usemsp = FALSE
}
if(!usemsp & !usemat) {
stop("neither of these two directories exist: ", '\n',
"  ", mat.dir, '\n',
"  ", msp.dir, '\n')
}
if(usemsp & usemat) {
msps<-list.files(msp.dir, recursive  = TRUE)
mats<-list.files(mat.dir, recursive = TRUE)
if(length(mats) > length(msps)) {usemsp <- FALSE}
if(length(msps) > length(mats)) {usemat <- FALSE}
if(length(msps) == length(mats)) {
feedback<-readline(prompt="Press 1 for .mat or 2 for .msp to continue")
if(feedback == 1) {usemsp <- FALSE}
if(feedback == 2) {usemat <- FALSE}
}
}
mat.dir <- c(mat.dir, msp.dir)[c(usemat, usemsp)]
mat.dir
getwd()
roxygen2::roxygenise()
SpecSearchParams<-c(
"IsRunSpectralDbSearch"=True,
"IsRunInSilicoFragmenterSearch"=True,
"IsPrecursorOrientedSearch"=False,
"IsUseInternalExperimentalSpectralDb"=False,
"IsUseInSilicoSpectralDbForLipids"=False,
"IsUseUserDefinedSpectralDb"=False,
"UserDefinedSpectralDbFilePath"=K:\Library_Processing\PhenHex_20151116\pos\spectra\PhenHexPos_val.msp,
"SolventType"=HCOONH4,
"MassRangeMin"=50,
"MassRangeMax"=2000
)
SpecSearchParams<-c(
"IsRunSpectralDbSearch"="True",
"IsRunInSilicoFragmenterSearch"="True",
"IsPrecursorOrientedSearch"="False",
"IsUseInternalExperimentalSpectralDb"="False",
"IsUseInSilicoSpectralDbForLipids"="False",
"IsUseUserDefinedSpectralDb"="False",
"UserDefinedSpectralDbFilePath"="K:\Library_Processing\PhenHex_20151116\pos\spectra\PhenHexPos_val.msp",
"SolventType"="HCOONH4",
"MassRangeMin"="50",
"MassRangeMax"="2000"
)
SpecSearchParams<-c(
"IsRunSpectralDbSearch"="True",
"IsRunInSilicoFragmenterSearch"="True",
"IsPrecursorOrientedSearch"="False",
"IsUseInternalExperimentalSpectralDb"="False",
"IsUseInSilicoSpectralDbForLipids"="False",
"IsUseUserDefinedSpectralDb"="False",
"UserDefinedSpectralDbFilePath"="K:\\Library_Processing\\PhenHex_20151116\\pos\\spectra\\PhenHexPos_val.msp",
"SolventType"="HCOONH4",
"MassRangeMin"="50",
"MassRangeMax"="2000"
)
SpecSearchParams
edit(SpecSearchParams)
?edit
getOption("editor")
SpecSearchParams
SpecSearchParams<-c(
"IsRunSpectralDbSearch"="True",
"IsRunInSilicoFragmenterSearch"="True",
"IsPrecursorOrientedSearch"="False",
"IsUseInternalExperimentalSpectralDb"="False",
"IsUseInSilicoSpectralDbForLipids"="False",
"IsUseUserDefinedSpectralDb"="False",
"UserDefinedSpectralDbFilePath"="K:\\Library_Processing\\PhenHex_20151116\\pos\\spectra\\PhenHexPos_val.msp",
"SolventType"="HCOONH4",
"MassRangeMin"="50",
"MassRangeMax"="2000"
)
SpecSearchParams
SpecSearchParams<-data.frame(c(
"IsRunSpectralDbSearch"="True",
"IsRunInSilicoFragmenterSearch"="True",
"IsPrecursorOrientedSearch"="False",
"IsUseInternalExperimentalSpectralDb"="False",
"IsUseInSilicoSpectralDbForLipids"="False",
"IsUseUserDefinedSpectralDb"="False",
"UserDefinedSpectralDbFilePath"="K:\\Library_Processing\\PhenHex_20151116\\pos\\spectra\\PhenHexPos_val.msp",
"SolventType"="HCOONH4",
"MassRangeMin"="50",
"MassRangeMax"="2000"
)
)
SpecSearchParams
View(SpecSearchParams)
devtools::install_github('cbroeckl/RAMCLustR', build_vignettes = TRUE)
library(RAMClustR)
test<-function(x) {
x <- 10
y <- x
}
test()
test<-function(x) {
x <- 10
y <<- x
}
test()
test<-function(x) {
x <- 10
y <- x
return(y)
}
newy<-test()
library(xcms)
library(plotly)
library(plotly)
df <- data.frame(x = c("1", "2", "3", "4", "5"),
y = c("1", "1", "1", "1", "1"))
steps <- list(
list(args = list("marker.color", "red"),
label = "Red",
method = "restyle",
value = "1"
),
list(args = list("marker.color", "green"),
label = "Green",
method = "restyle",
value = "2"
),
list(args = list("marker.color", "blue"),
label = "Blue",
method = "restyle",
value = "3"
)
)
steps
p <- df %>%
plot_ly(x = ~x, y = ~y,
mode = "markers",
marker = list(size = 20,
color = 'green'),
type = "scatter") %>%
layout(title = "Basic Slider",
sliders = list(
list(
active = 1,
currentvalue = list(prefix = "Color: "),
pad = list(t = 60),
steps = steps)))
chart_link = plotly_POST(p, filename="sliders/basic")
chart_link
chart_link = plotly(p, filename="sliders/basic")
chart_link = plotly(p)
df <- data.frame(x = c("1", "2", "3", "4", "5"),
y = c("1", "1", "1", "1", "1"))
steps <- list(
list(args = list("marker.color", "red"),
label = "Red",
method = "restyle",
value = "1"
),
list(args = list("marker.color", "green"),
label = "Green",
method = "restyle",
value = "2"
),
list(args = list("marker.color", "blue"),
label = "Blue",
method = "restyle",
value = "3"
)
)
p <- df %>%
plot_ly(x = ~x, y = ~y,
mode = "markers",
marker = list(size = 20,
color = 'green'),
type = "scatter") %>%
layout(title = "Basic Slider",
sliders = list(
list(
active = 1,
currentvalue = list(prefix = "Color: "),
pad = list(t = 60),
steps = steps)))
plotly(p)
plot_ly(p)
p <- df %>%
plot_ly(x = ~x, y = ~y,
mode = "markers",
marker = list(size = 20,
color = 'green'),
type = "scatter") %>%
layout(title = "Basic Slider",
sliders = list(
list(
active = 1,
currentvalue = list(prefix = "Color: "),
pad = list(t = 60),
steps = steps)))
plot_ly(x = ~x, y = ~y,
mode = "markers",
marker = list(size = 20,
color = 'green'),
type = "scatter")
library(plotly)
x <- seq(0,10, length.out = 1000)
aval <- list()
for(step in 1:11){
aval[[step]] <-list(visible = FALSE,
name = paste0('v = ', step),
x=x,
y=sin(step*x))
}
aval[3][[1]]$visible = TRUE
steps <- list()
p <- plot_ly()
for (i in 1:11) {
p <- add_lines(p,x=aval[i][[1]]$x,  y=aval[i][[1]]$y, visible = aval[i][[1]]$visible,
name = aval[i][[1]]$name, type = 'scatter', mode = 'lines', hoverinfo = 'name',
line=list(color='00CED1'), showlegend = FALSE)
step <- list(args = list('visible', rep(FALSE, length(aval))),
method = 'restyle')
step$args[[2]][i] = TRUE
steps[[i]] = step
}
p <- p %>%
layout(sliders = list(list(active = 3,
currentvalue = list(prefix = "Frequency: "),
steps = steps)))
plot_ly(p)
p
shinyApp(
ui = fluidPage(
titlePanel("Mimicking a Google Form with a Shiny app"),
div(
id = "form",
textInput("name", "Name", ""),
textInput("favourite_pkg", "Favourite R package"),
checkboxInput("used_shiny", "I've built a Shiny app in R before", FALSE),
sliderInput("r_num_years", "Number of years using R", 0, 25, 2, ticks = FALSE),
selectInput("os_type", "Operating system used most frequently",
c("",  "Windows", "Mac", "Linux")),
actionButton("submit", "Submit", class = "btn-primary")
)
),
server = function(input, output, session) {
}
)
library(shiny)
shinyApp(
ui = fluidPage(
titlePanel("Mimicking a Google Form with a Shiny app"),
div(
id = "form",
textInput("name", "Name", ""),
textInput("favourite_pkg", "Favourite R package"),
checkboxInput("used_shiny", "I've built a Shiny app in R before", FALSE),
sliderInput("r_num_years", "Number of years using R", 0, 25, 2, ticks = FALSE),
selectInput("os_type", "Operating system used most frequently",
c("",  "Windows", "Mac", "Linux")),
actionButton("submit", "Submit", class = "btn-primary")
)
),
server = function(input, output, session) {
}
)
shinyApp(
ui = fluidPage(
titlePanel("Mimicking a Google Form with a Shiny app"),
div(
id = "form",
textInput("name", "Name", ""),
textInput("favourite_pkg", "Favourite R package"),
checkboxInput("used_shiny", "I've built a Shiny app in R before", FALSE),
sliderInput("r_num_years", "Number of years using R", 0, 25, 2, ticks = FALSE),
selectInput("os_type", "Operating system used most frequently",
c("",  "Windows", "Mac", "Linux")),
actionButton("submit", "Submit", class = "btn-primary")
)
),
server = function(input, output, session) {
}
)
which.function = "predict"
(! any (which.function %in% c("predict", "mssearch")))
which.function = "magic"
(! any (which.function %in% c("predict", "mssearch")))
if(! any (which.function %in% c("predict", "mssearch"))) {
cat(which.function, "is not a valid MSFinder console option", '\n', "please select one of 'predict' or 'mssearch'")
}
if(! any (which.function %in% c("predict", "mssearch"))) {
cat("'", which.function, "'", "is not a valid MSFinder console option", '\n', "please select one of 'predict' or 'mssearch'")
}
setwd("~/GitHub/RAMClustR/R")
setwd('..')
roxygen2::roxygenise()
load("K:/Wintermantle, Bill USDA/201705_Sugarbeet_Root_Tissue/PH Stacked Pos Data/datasets/RCobject.Rdata")
is.na(ramclustObj$inchikey)
ramclustObj<-RC
is.na(ramclustObj$inchikey)
names(ramclustObj)
rm(RC)
load("K:/Stangoulis, James Flinders University/201705_Stangoulis_Guild_Rachis and seed/Rachis - PH Stacked/datasets/RCobject.Rdata")
names(RC)
load("K:/Clark_Maggie/2017_Honduras/R00/2017-01-17-Honduras_R00_Phase_1/TOF_PH_Pos/datasets/RCobject.Rdata")
names(RC)
ramclustObj$inchikey
ramclustObj<-RC
ramclustObj$inchikey
is.null(ramclustObj$inchikey)
synonyms<-as.list(rep(NA, length(ramclustObj$ann)))
names(synonyms)<-ramclustObj$cmpd
synonyms
i<-1
link <- paste0("http://cts.fiehnlab.ucdavis.edu/service/synonyms/", ramclustObj$inchikey[i])
link
(!is.na(ramclustObj$inchikey[i]))
i<-2
(!is.na(ramclustObj$inchikey[i]))
link <- paste0("http://cts.fiehnlab.ucdavis.edu/service/synonyms/", ramclustObj$inchikey[i])
link
suppressWarnings(out<-readLines(link))
names<-unlist(fromJSON(out)$result)
names
library('jasonlite')
library(jsonlite)
suppressWarnings(out<-readLines(link))
names<-unlist(fromJSON(out)$result)
names<-unlist(fromJSON(out))
names
syns<-unlist(fromJSON(out))
syns<-syns[order(nchar(syns))]
syns
syonyms[[i]] <- syns
synonyms[[i]] <- syns
synonyms[[i]]
synonyms
synonyms[1:3]
