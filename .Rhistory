msinst="Thermo ISQ",
InletTemp="280",
TransferTemp="280",
mstype="QUAD",
mzdiffquad=0.5,
msmode="P",
ionization="EI",
msscanrange="50-650",
scantime="0.2",
conevolt="30",
deriv="Methoxyamine+MSTFA")),
newLC=data.frame(c(chrominst="Waters UPLC",
msinst="Waters Xevo G2 TOF",
column="Waters C8, 1 x 100 mm, 1.7 uM",
solvA="95% water, 5% methanol, 0.1% formic acid",
solvB="5% water, 95% methanol, 0.1% formic acid",
CE1="6",
CE2="15-30",
mstype="TOF",
msmode="P",
ionization="ESI",
colgas="Ar",
msscanrange="50-1200",
conevolt="30")),
newGC=data.frame(c(Experiment="ABRF",
chrominst="Thermo Trace GC: TG-5MS column",
msinst="Thermo ISQ",
InletTemp="280",
TransferTemp="280",
mstype="QUAD",
mzdiffquad=0.5,
msmode="P",
ionization="EI",
msscanrange="50-650",
scantime="0.2",
conevolt="30",
deriv="Methoxyamine+MSTFA"))
)
platforms<-names(paramsets)
ExpVars<-c(Experiment="",
Species="",
Sample="",
platform="",
doANOVA=TRUE,
doPCA=TRUE,
doContrasts=TRUE,
fact1name="trt",
fact2name="",
fact3name="",
fact4name="",
fact5name="",
anovafact1="",
anovafact2="",
anovafact3="",
anovafact4="",
anovafact5="",
interaction1="c()",
interaction2="c()",
interaction3="c()",
interaction4="c()" , mode="character")
VarDesc<-c("experiment name, no spaces",
"species name",
"sample type",
paste(platforms, sep=" ", collapse=" "),
"perform these stats?",
"",
"",
"Assign a name for your factors",
"",
"",
"",
"",
"factors to use for ANOVA: use numerical (1-5)",
"",
"",
"",
"",
"interactions, numerical, separate numbers with comma",
"",
"",
""
)
Experiment<-data.frame(ExpVars,VarDesc)
design<-edit(Experiment)
platform<-platforms[grep(as.character(design["platform",1]), platforms, ignore.case=TRUE)]
instrument<-edit(paramsets[[as.character(platform)]])
exp.pars<-list(design, instrument)
names(exp.pars)<-c("design", "instrument")
return(exp.pars)
}
ExpDes<-defineExperiment()
ExpVars<-c(Experiment="",
Species="",
Sample="",
platform="",
doANOVA=TRUE,
doPCA=TRUE,
doContrasts=TRUE,
fact1name="trt",
fact2name="",
fact3name="",
fact4name="",
fact5name="",
anovafact1="",
anovafact2="",
anovafact3="",
anovafact4="",
anovafact5="",
interaction1="c()",
interaction2="c()",
interaction3="c()",
interaction4="c()")
mode(expVars)
mode(ExpVars)
VarDesc<-c("experiment name, no spaces",
"species name",
"sample type",
paste(platforms, sep=" ", collapse=" "),
"perform these stats?",
"",
"",
"Assign a name for your factors",
"",
"",
"",
"",
"factors to use for ANOVA: use numerical (1-5)",
"",
"",
"",
"",
"interactions, numerical, separate numbers with comma",
"",
"",
""
)
Experiment<-data.frame(ExpVars,VarDesc)
VarDesc<-c("experiment name, no spaces",
"species name",
"sample type",
paste(platforms, sep=" ", collapse=" "),
"perform these stats?",
"",
"",
"Assign a name for your factors",
"",
"",
"",
"",
"factors to use for ANOVA: use numerical (1-5)",
"",
"",
"",
"",
"interactions, numerical, separate numbers with comma",
"",
"",
""
)
paramsets<-list(
C8serum=data.frame(c(chrominst="Waters UPLC: C8 MeOH Gradient",
msinst="Waters Xevo G2 TOF",
column="Waters C8, 1 x 100 mm, 1.7 uM",
solvA="95% water, 5% methanol, 0.1% formic acid",
solvB="5% water, 95% methanol, 0.1% formic acid",
MSlevs=2,
CE1="6",
CE2="15-30",
mstype="TOF",
mzdifftof=0.05,
msmode="P",
ionization="ESI",
ESIvoltage="2200",
colgas="Ar",
msscanrange="50-1200",
conevolt="30")),
C18gen=data.frame(c(chrominst="Waters UPLC: C18 ACN Gradient",
msinst="Waters Xevo G2 TOF",
CE1="6",
CE2="15-30",
mstype="TOF",
msmode="P",
ionization="ESI",
colgas="Ar",
msscanrange="50-1200",
conevolt="30")) ,
GCdb5=data.frame(c(Experiment="ABRF",
chrominst="Thermo Trace GC: TG-5MS column",
msinst="Thermo ISQ",
InletTemp="280",
TransferTemp="280",
mstype="QUAD",
mzdiffquad=0.5,
msmode="P",
ionization="EI",
msscanrange="50-650",
scantime="0.2",
conevolt="30",
deriv="Methoxyamine+MSTFA")),
newLC=data.frame(c(chrominst="Waters UPLC",
msinst="Waters Xevo G2 TOF",
column="Waters C8, 1 x 100 mm, 1.7 uM",
solvA="95% water, 5% methanol, 0.1% formic acid",
solvB="5% water, 95% methanol, 0.1% formic acid",
CE1="6",
CE2="15-30",
mstype="TOF",
msmode="P",
ionization="ESI",
colgas="Ar",
msscanrange="50-1200",
conevolt="30")),
newGC=data.frame(c(Experiment="ABRF",
chrominst="Thermo Trace GC: TG-5MS column",
msinst="Thermo ISQ",
InletTemp="280",
TransferTemp="280",
mstype="QUAD",
mzdiffquad=0.5,
msmode="P",
ionization="EI",
msscanrange="50-650",
scantime="0.2",
conevolt="30",
deriv="Methoxyamine+MSTFA"))
)
platforms<-names(paramsets)
ExpVars<-c(Experiment="",
Species="",
Sample="",
platform="",
doANOVA=TRUE,
doPCA=TRUE,
doContrasts=TRUE,
fact1name="trt",
fact2name="",
fact3name="",
fact4name="",
fact5name="",
anovafact1="",
anovafact2="",
anovafact3="",
anovafact4="",
anovafact5="",
interaction1="c()",
interaction2="c()",
interaction3="c()",
interaction4="c()")
mode(ExpVars)
VarDesc<-c("experiment name, no spaces",
"species name",
"sample type",
paste(platforms, sep=" ", collapse=" "),
"perform these stats?",
"",
"",
"Assign a name for your factors",
"",
"",
"",
"",
"factors to use for ANOVA: use numerical (1-5)",
"",
"",
"",
"",
"interactions, numerical, separate numbers with comma",
"",
"",
""
)
Experiment<-data.frame(ExpVars,VarDesc)
mode(Experiment)
Experiment
mode(Experiment$ExpVars)
mode(Experiment$VarDesc)
mode(Experiment)<-"character"
design<-edit(Experiment)
Experiment<-data.frame(ExpVars,VarDesc)
design<-edit(Experiment)
Experiment<-data.frame(ExpVars,VarDesc)
mode(Experiment)<-"character"
design<-edit(Experiment)
mode(ExpVars)
is.vector(ExpVars)
Experiment<-data.frame(ExpVars,VarDesc, strings.as.factors=FALSE)
design<-edit(Experiment)
?data.frame
Experiment<-data.frame(ExpVars,VarDesc, stringsAsFactors=FALSE)
design<-edit(Experiment)
##merge this with the pmfxcms function to integrate the systems
defineExperiment<-function()
{
paramsets<-list(
C8serum=data.frame(c(chrominst="Waters UPLC: C8 MeOH Gradient",
msinst="Waters Xevo G2 TOF",
column="Waters C8, 1 x 100 mm, 1.7 uM",
solvA="95% water, 5% methanol, 0.1% formic acid",
solvB="5% water, 95% methanol, 0.1% formic acid",
MSlevs=2,
CE1="6",
CE2="15-30",
mstype="TOF",
mzdifftof=0.05,
msmode="P",
ionization="ESI",
ESIvoltage="2200",
colgas="Ar",
msscanrange="50-1200",
conevolt="30")),
C18gen=data.frame(c(chrominst="Waters UPLC: C18 ACN Gradient",
msinst="Waters Xevo G2 TOF",
CE1="6",
CE2="15-30",
mstype="TOF",
msmode="P",
ionization="ESI",
colgas="Ar",
msscanrange="50-1200",
conevolt="30")) ,
GCdb5=data.frame(c(Experiment="ABRF",
chrominst="Thermo Trace GC: TG-5MS column",
msinst="Thermo ISQ",
InletTemp="280",
TransferTemp="280",
mstype="QUAD",
mzdiffquad=0.5,
msmode="P",
ionization="EI",
msscanrange="50-650",
scantime="0.2",
conevolt="30",
deriv="Methoxyamine+MSTFA")),
newLC=data.frame(c(chrominst="Waters UPLC",
msinst="Waters Xevo G2 TOF",
column="Waters C8, 1 x 100 mm, 1.7 uM",
solvA="95% water, 5% methanol, 0.1% formic acid",
solvB="5% water, 95% methanol, 0.1% formic acid",
CE1="6",
CE2="15-30",
mstype="TOF",
msmode="P",
ionization="ESI",
colgas="Ar",
msscanrange="50-1200",
conevolt="30")),
newGC=data.frame(c(Experiment="ABRF",
chrominst="Thermo Trace GC: TG-5MS column",
msinst="Thermo ISQ",
InletTemp="280",
TransferTemp="280",
mstype="QUAD",
mzdiffquad=0.5,
msmode="P",
ionization="EI",
msscanrange="50-650",
scantime="0.2",
conevolt="30",
deriv="Methoxyamine+MSTFA"))
)
platforms<-names(paramsets)
ExpVars<-c(Experiment="",
Species="",
Sample="",
platform="",
doANOVA=TRUE,
doPCA=TRUE,
doContrasts=TRUE,
fact1name="trt",
fact2name="",
fact3name="",
fact4name="",
fact5name="",
anovafact1="",
anovafact2="",
anovafact3="",
anovafact4="",
anovafact5="",
interaction1="c()",
interaction2="c()",
interaction3="c()",
interaction4="c()")
mode(ExpVars)
VarDesc<-c("experiment name, no spaces",
"species name",
"sample type",
paste(platforms, sep=" ", collapse=" "),
"perform these stats?",
"",
"",
"Assign a name for your factors",
"",
"",
"",
"",
"factors to use for ANOVA: use numerical (1-5)",
"",
"",
"",
"",
"interactions, numerical, separate numbers with comma",
"",
"",
""
)
Experiment<-data.frame(ExpVars,VarDesc, stringsAsFactors=FALSE)
design<-edit(Experiment)
platform<-platforms[grep(as.character(design["platform",1]), platforms, ignore.case=TRUE)]
instrument<-edit(paramsets[[as.character(platform)]])
exp.pars<-list(design, instrument)
names(exp.pars)<-c("design", "instrument")
return(exp.pars)
}
ExpDes<-defineExperiment()
ExpDes<-defineExperiment()
ExpDes
getwd()
setwd("~/GitHub/RAMClustR/R")
setwd("~/GitHub/RAMClustR")
library(xcms, quietly=TRUE)
load("C:/Users/cbroeckl/Documents/GitHub/backup_RAMClustR/inst/exampledata/xset4.Rdata")
source("R/Params.R")
xcmsObj<-xset4
ms=NULL
idmsms=NULL
taglocation="filepaths"
MStag<-"01.cdf"
idMSMStag<-"02.cdf"
featdelim="_"
timepos=2
st=NULL
sr=NULL
maxt=NULL
deepSplit=FALSE
blocksize=2000
mult=5
hmax=0.35
sampNameCol=NULL
collapse=TRUE
mspout=TRUE
mslev=2
ExpDes=NULL
require(xcms, quietly=TRUE)
require(ff, quietly=TRUE)
require(fastcluster, quietly=TRUE)
require(dynamicTreeCut, quietly=TRUE)
if(is.null(xcmsObj) & is.null(ms))
{stop("you must select either
1: an MS dataset with features as columns
(__)one column may contain sample names, defined by sampNameCol)
2: an xcmsObj. If you choose an xcms object, set taglocation: 'filepaths' by default
and both MStag and idMSMStag")}
if(!is.null(xcmsObj) & mslev==2 & any(is.null(MStag), is.null(idMSMStag), is.null(taglocation)))
{stop("you must specify the the MStag, idMSMStag, and the taglocations")}
if(is.null(ExpDes) & mspout==TRUE){
cat("please enter experiment description (see popup window)")
ExpDes<-defineExperiment()
}
a<-Sys.time()
##in using non-xcms data as input
##remove MSdata sets and save data matrix alone
if(!is.null(ms)){
if(is.null(st)) stop("please specify st:
a recommended starting point is half the value of
your average chromatographic peak width at half max (seconds)")
if(is.null(sr)) sr<-0.15
if(is.null(maxt)) maxt<-60
if(is.null(sampNameCol)) {featcol<-1:ncol(MSdata)} else {
featcol<-setdiff(1:(ncol(MSdata)), sampNameCol)}
sampnames<-MSdata[,sampNameCol]
data1<-as.matrix(MSdata[,featcol])
data2<-as.matrix(MSMSdata[,featcol])
if(dimnames(data1)!=dimnames(data2))
{stop("the dimensions of your MS and idMSMS data are not identical")}
rtmz<-matrix(
unlist(
strsplit(dimnames(data1)[[2]], featdelim)
),
byrow=TRUE, ncol=2)
times<-as.numeric(rtmz[,2])
mzs<-as.numeric(rtmz[,1])
rm(rtmz)
}
if(!class(xcmsObj)=="xcmsSet")
{stop("xcmsObj must reference an object generated by XCMS, of class 'xcmsSet'")}
if(is.null(st)) st<-round(median(xcmsObj@peaks[,"rtmax"]-xcmsObj@peaks[,"rtmin"])/2, digits=2)
if(is.null(sr)) sr<-st/5
if(is.null(maxt)) maxt<-st*20
sampnames<-row.names(xcmsObj@phenoData)
data12<-groupval(xcmsObj, value="into")
if(taglocation=="filepaths")
msfiles<-grep(MStag, xcmsObj@filepaths, ignore.case=TRUE)
msmsfiles<-grep(idMSMStag, xcmsObj@filepaths, ignore.case=TRUE)
if(length(intersect(msfiles, msmsfiles)>0))
{stop("your MS and idMSMStag values do not generate unique file lists")}
if(length(msfiles)!=length(msmsfiles))
{stop("the number of MS files must equal the number of MSMS files")}
data1<-t(data12[,msfiles])
row.names(data1)<-sampnames[msfiles]
data2<-t(data12[,msmsfiles])
row.names(data2)<-sampnames[msmsfiles]  ##this may need to be changed to dimnames..
times<-round(xcmsObj@groups[,"rtmed"], digits=3)
mzs<-round(xcmsObj@groups[,"mzmed"], digits=4)
}
install.packages("ape")
install.packages("fastmatch")
install.packages("ff")
install.packages("dynamicTreeCut")
install.packages("preprocessCore")
install.packages("xcms")
install.packages("dynamicTreeCut")
devtools::use_vignette("ramclustR")
