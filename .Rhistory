M.ppm.ramclustr <- rep(NA, max(ramclustObj$featclus))
M.rank.ramclustr <- rep(NA, max(ramclustObj$featclus))
M.ann.ramclustr <- as.list(rep(NA, max(ramclustObj$featclus)))
if(is.null(cmpd)) {cmpd <- (1:max(ramclustObj$featclus)) }
cl
cmpd
s<-data.frame("mz"=ramclustObj$fmz[which(ramclustObj$featclus==cl)], "int"=ramclustObj$msint[which(ramclustObj$featclus==cl)])
out<-findMAIN(
s,
adductmz = NULL,
ionmode = mode,
adducthyp = ads,
ms2spec = NULL,
rules = c(ads, nls),
mzabs = mzabs.error,
ppm = ppm.error,
mainpkthr = 0.1,
collapseResults = FALSE)
summarytable<-summary(out)
M.findmain[cl]<-summarytable[1, "neutral_mass"]
M.ppm.findmain[cl]<-summarytable[1, "medppm"]
M.ann.findmain[[cl]]<-out[[1]]
for(y in 1:length(out)) {
keep<-which(!is.na(out[[y]][,"adduct"]))  ## which are annotated peaks
out[[y]][keep[which(is.na(out[[y]][keep,"ppm"]))],"ppm"] <- ppm.error/2
}
summaryscores<-sapply(
1:length(out),
FUN=function(x)
{
keep<-which(!is.na(out[[x]][,"adduct"]))  ## which are annotated peaks
wt<- adnlwts[out[[x]][keep,"adduct"]]
int<-(out[[x]][keep, "int"])^0.1   ## use square root of intensity to prevent bias toward base peak
mzerr<-out[[x]][keep, "ppm"]
# mzerr[is.na(mzerr)]<-0
mzerr<-round(exp(-mzerr^2/(2*(ppm.error^2)) ), digits = 4)  ## this is a sigmoid function to weight high ppm error peaks lower
#massorder<-order(out[[x]][keep, "mz"])
massorder<-sqrt(order(out[[x]][keep, "mz"]))
massorder<-(massorder)/max((massorder))
return(sum((massorder *int * mzerr * wt), na.rm=TRUE) + (0.1*length(keep)))  ## product of the intensity and the scaled mzerror
# data.frame(keep, wt, int, mzerr, 'ppm'=out[[x]][keep, "ppm"], massorder, 'score'=(massorder *int * mzerr * wt))
}
)
best<-which.max(summaryscores)
M.ramclustr[cl]<-summarytable[best, "neutral_mass"]
M.ppm.ramclustr[cl]<-summarytable[best, "medppm"]
M.rank.ramclustr[cl]<-best
M.ann.ramclustr[[cl]]<-out[[best]]
if(10*round(cl/10, digits=0) == cl) {
cat(cl, "of", max(ramclustObj$featclus), '\n')
}
for(cl in cmpd){
s<-data.frame("mz"=ramclustObj$fmz[which(ramclustObj$featclus==cl)], "int"=ramclustObj$msint[which(ramclustObj$featclus==cl)])
out<-findMAIN(
s,
adductmz = NULL,
ionmode = mode,
adducthyp = ads,
ms2spec = NULL,
rules = c(ads, nls),
mzabs = mzabs.error,
ppm = ppm.error,
mainpkthr = 0.1,
collapseResults = FALSE)
summarytable<-summary(out)
M.findmain[cl]<-summarytable[1, "neutral_mass"]
M.ppm.findmain[cl]<-summarytable[1, "medppm"]
M.ann.findmain[[cl]]<-out[[1]]
## set all major adduct ppm errors to half ppm.error, or 5
for(y in 1:length(out)) {
keep<-which(!is.na(out[[y]][,"adduct"]))  ## which are annotated peaks
out[[y]][keep[which(is.na(out[[y]][keep,"ppm"]))],"ppm"] <- ppm.error/2
}
summaryscores<-sapply(
1:length(out),
FUN=function(x)
{
keep<-which(!is.na(out[[x]][,"adduct"]))  ## which are annotated peaks
wt<- adnlwts[out[[x]][keep,"adduct"]]
int<-(out[[x]][keep, "int"])^0.1   ## use square root of intensity to prevent bias toward base peak
mzerr<-out[[x]][keep, "ppm"]
# mzerr[is.na(mzerr)]<-0
mzerr<-round(exp(-mzerr^2/(2*(ppm.error^2)) ), digits = 4)  ## this is a sigmoid function to weight high ppm error peaks lower
#massorder<-order(out[[x]][keep, "mz"])
massorder<-sqrt(order(out[[x]][keep, "mz"]))
massorder<-(massorder)/max((massorder))
return(sum((massorder *int * mzerr * wt), na.rm=TRUE) + (0.1*length(keep)))  ## product of the intensity and the scaled mzerror
# data.frame(keep, wt, int, mzerr, 'ppm'=out[[x]][keep, "ppm"], massorder, 'score'=(massorder *int * mzerr * wt))
}
)
## the result with the best summaryscore can be selected
## and tagged as such somehow
best<-which.max(summaryscores)
M.ramclustr[cl]<-summarytable[best, "neutral_mass"]
M.ppm.ramclustr[cl]<-summarytable[best, "medppm"]
M.rank.ramclustr[cl]<-best
M.ann.ramclustr[[cl]]<-out[[best]]
if(10*round(cl/10, digits=0) == cl) {
cat(cl, "of", max(ramclustObj$featclus), '\n')
}
}
ramclustObj$M.ramclustr <- M.ramclustr
ramclustObj$M.ppm.ramclustr <- M.ppm.ramclustr
ramclustObj$M.rank.ramclustr <- M.rank.ramclustr
ramclustObj$M.ann.ramclustr <- M.ann.ramclustr
ramclustObj$M.findmain <- M.findmain
ramclustObj$M.ppm.findmain <- M.ppm.findmain
ramclustObj$M.ann.findmain <- M.ann.findmain
ramclustObj$use.findmain <- rep(TRUE, length(M.ppm.findmain))
resolve <- which(abs(ramclustObj$M.ramclustr - ramclustObj$M.findmain)  > (2*mzabs.error))
for(i in resolve) {
if(ramclustObj$M.ramclustr[i] >  ramclustObj$M.findmain[i]) {
ramclustObj$use.findmain[i] <-FALSE
}
}
resolve
ramclustObj$M <- ramclustObj$M.findmain
ramclustObj$M[!ramclustObj$use.findmain] <- ramclustObj$M.ramclustr[!ramclustObj$use.findmain]
ramclustObj$M.ann <- ramclustObj$M.ann.findmain
resolved <- which(!ramclustObj$use.findmain)
for(i in resolved) {
ramclustObj$M.ann[[i]] <- ramclustObj$M.ann.ramclustr[[i]]
}
plot.findmain
cat("plotting findmain annotation results", '\n')
dev.off()
dev.off()
pdf("spectra/findmainPlots.pdf", width=10, height = 4.6)
par(mfrow=c(1,2))
cl
cmpd
cl in cmpd
for(cl in cmpd) {
PlotSpec(x=ramclustObj$M.ann.ramclustr[[cl]], txt=ramclustObj$M.ann.ramclustr[[cl]][,c("mz","adduct")])
title(main=list(paste(
cl, ":",
"M.ramclustr =",
round(ramclustObj$M.ramclustr[cl], digits=4), "( +/-", round(ramclustObj$M.ppm.ramclustr[cl], digits=1),
"ppm )"), font = if(ramclustObj$use.findmain[cl]) {1} else {2}, col = if(ramclustObj$use.findmain[cl]) {1} else {2} ))
PlotSpec(x=ramclustObj$M.ann.findmain[[cl]], txt=ramclustObj$M.ann.findmain[[cl]][,c("mz","adduct")])
title(main = list(paste(
cl, ":",
"M.findmain =",
round(ramclustObj$M.findmain[cl], digits=4), "( +/-", round(ramclustObj$M.ppm.findmain[cl], digits=1),
"ppm )"  ),
font = if(ramclustObj$use.findmain[cl]) {2} else {1}, col = if(ramclustObj$use.findmain[cl]) {2} else {1}  ))
}
dev.off()
if(plot.findmain) {
cat("plotting findmain annotation results", '\n')
pdf("spectra/findmainPlots.pdf", width=10, height = 4.6)
par(mfrow=c(1,2))
for(cl in cmpd) {
PlotSpec(x=ramclustObj$M.ann.ramclustr[[cl]], txt=ramclustObj$M.ann.ramclustr[[cl]][,c("mz","adduct")])
title(main=list(paste(
cl, ":",
"M.ramclustr =",
round(ramclustObj$M.ramclustr[cl], digits=4), "( +/-", round(ramclustObj$M.ppm.ramclustr[cl], digits=1),
"ppm )"), font = if(ramclustObj$use.findmain[cl]) {1} else {2}, col = if(ramclustObj$use.findmain[cl]) {1} else {2} ))
PlotSpec(x=ramclustObj$M.ann.findmain[[cl]], txt=ramclustObj$M.ann.findmain[[cl]][,c("mz","adduct")])
title(main = list(paste(
cl, ":",
"M.findmain =",
round(ramclustObj$M.findmain[cl], digits=4), "( +/-", round(ramclustObj$M.ppm.findmain[cl], digits=1),
"ppm )"  ),
font = if(ramclustObj$use.findmain[cl]) {2} else {1}, col = if(ramclustObj$use.findmain[cl]) {2} else {1}  ))
}
dev.off()
}
writeMat
cl
ms<-ramclustObj$M.ann[[cl]] # ms <- matrix(round(rnorm(30, mean = 700, sd = 200), digits=3), ncol = 3)
prcr<-which(ms[,"adduct"] %in% ads) # prcr = sample (1:10, 1)
prcr<-prcr[which.max(ms[prcr,"int"])]
prcmz<-ms[prcr,"mz"]  # prcmz <- ms[prcr, 1]
prctype<-ms[prcr,"adduct"] # prctype = "[M+H]+"
prctype
ms
out<-paste(
"NAME: ", ramclustObj$cmpd[cl], '\n',
"PRECURSORMZ: ", prcmz, '\n',
"PRECURSORTYPE: ", prctype, '\n',
"IONMODE: ", mode, '\n',
"MSTYPE: ", "MS1", '\n',
"Num Peaks: ", nrow(ms), '\n', sep="")
for(i in 1:nrow(ms)) {
out<-paste(out, ms[i,1], " ", ms[i,2], '\n', sep="")
}
out
(!is.null(ramclustObj$msmsint))
do<-which(ramclustObj$featclus == cl)
do
msms<-cbind(
'mz' = ramclustObj$fmz[do],
'int' = ramclustObj$msmsint[do])
msms
msms<-msms[which(msms[,"mz"] <= (prcmz + 3)), drop = FALSE]
msms<-msms[order(msms[,"int"], decreasing=TRUE)]
msms
msms<-msms[order(msms[,"int"], decreasing=TRUE),]
msms<-cbind(
'mz' = ramclustObj$fmz[do],
'int' = ramclustObj$msmsint[do])
msms<-msms[which(msms[,"mz"] <= (prcmz + 3)), drop = FALSE]
msms<-msms[order(msms[,"int"], decreasing=TRUE),]
msms
if(nrow(msms)>0) {
out <- paste (
"MSTYPE:" , "MS2", '\n' ,
"Num Peaks: ", nrow(msms), '\n',
sep="")
for(i in 1:nrow(msms)) {
out<-paste(out, msms[i,1], " ", msms[i,2], '\n', sep="")
}
}
msms<-cbind(
'mz' = ramclustObj$fmz[do],
'int' = ramclustObj$msmsint[do])
msms<-msms[which(msms[,"mz"] <= (prcmz + 3)), drop = FALSE]
msms<-msms[order(msms[,"int"], decreasing=TRUE),]
msms<-cbind(
'mz' = ramclustObj$fmz[do],
'int' = ramclustObj$msmsint[do])
msms<-msms[which(msms[,"mz"] <= (prcmz + 3)),, drop = FALSE]
msms
msms<-msms[order(msms[,"int"], decreasing=TRUE),]
msms
if(nrow(msms)>0) {
out <- paste (
"MSTYPE:" , "MS2", '\n' ,
"Num Peaks: ", nrow(msms), '\n',
sep="")
for(i in 1:nrow(msms)) {
out<-paste(out, msms[i,1], " ", msms[i,2], '\n', sep="")
}
}
write(out, file=paste0("spectra/mat/", ramclustObj$cmpd[cl], ".mat"))
getwd()
ms<-ramclustObj$M.ann[[cl]] # ms <- matrix(round(rnorm(30, mean = 700, sd = 200), digits=3), ncol = 3)
prcr<-which(ms[,"adduct"] %in% ads) # prcr = sample (1:10, 1)
prcr<-prcr[which.max(ms[prcr,"int"])]
prcmz<-ms[prcr,"mz"]  # prcmz <- ms[prcr, 1]
prctype<-ms[prcr,"adduct"] # prctype = "[M+H]+"
out<-paste(
"NAME: ", ramclustObj$cmpd[cl], '\n',
"PRECURSORMZ: ", prcmz, '\n',
"PRECURSORTYPE: ", prctype, '\n',
"IONMODE: ", mode, '\n',
"MSTYPE: ", "MS1", '\n',
"Num Peaks: ", nrow(ms), '\n', sep="")
for(i in 1:nrow(ms)) {
out<-paste(out, ms[i,1], " ", ms[i,2], '\n', sep="")
}
if(!is.null(ramclustObj$msmsint)) {
do<-which(ramclustObj$featclus == cl)
msms<-cbind(
'mz' = ramclustObj$fmz[do],
'int' = ramclustObj$msmsint[do])
msms<-msms[which(msms[,"mz"] <= (prcmz + 3)),, drop = FALSE]
msms<-msms[order(msms[,"int"], decreasing=TRUE),]
if(nrow(msms)>0) {
out <- paste (out,
"MSTYPE:" , "MS2", '\n' ,
"Num Peaks: ", nrow(msms), '\n',
sep="")
for(i in 1:nrow(msms)) {
out<-paste(out, msms[i,1], " ", msms[i,2], '\n', sep="")
}
}
}
write(out, file=paste0("spectra/mat/", ramclustObj$cmpd[cl], ".mat"))
((!is.null(ramclustObj$msmsint)))
ramclustObj$ExpDes
ramclustObj$ExpDes[[2]][which(ramclustObj$ExpDes[[2]][,1] == "CE2"),2]
which(ramclustObj$ExpDes[[2]][,1]
ramclustObj$ExpDes[[2]][,1]
as.character(ramclustObj$ExpDes[[2]][,1])
ramclustObj$ExpDes[[2]]
row.names(ramclustObj$ExpDes[[2]])
which(row.names(ramclustObj$ExpDes[[2]]) == "CE2")
ramclustObj$ExpDes[[2]][which(row.names(ramclustObj$ExpDes[[2]]) == "CE2"),2]
which(row.names(ramclustObj$ExpDes[[2]]) == "CE2")
ramclustObj$ExpDes[[2]][which(row.names(ramclustObj$ExpDes[[2]]) == "CE2"),1]
out<-paste(
"NAME: ", ramclustObj$cmpd[cl], '\n',
"RETENTIONTIME: ", round(ramclustObj$clrt[cl], digits=2), '\n',
"PRECURSORMZ: ", prcmz, '\n',
"PRECURSORTYPE: ", prctype, '\n',
"IONTYPE: ", mode, '\n',
"SPECTRUMTYPE: Centroid", '\n',
if((!is.null(ramclustObj$msmsint))) {"COLLISIONENERGY: ", as.character(ramclustObj$ExpDes[[2]][which(row.names(ramclustObj$ExpDes[[2]]) == "CE2"),1]), '\n', }
"MSTYPE: ", "MS1", '\n',
"Num Peaks: ", nrow(ms), '\n', sep="")
out<-paste(
"NAME: ", ramclustObj$cmpd[cl], '\n',
"RETENTIONTIME: ", round(ramclustObj$clrt[cl], digits=2), '\n',
"PRECURSORMZ: ", prcmz, '\n',
"PRECURSORTYPE: ", prctype, '\n',
"IONTYPE: ", mode, '\n',
"SPECTRUMTYPE: Centroid", '\n',
if((!is.null(ramclustObj$msmsint))) {c("COLLISIONENERGY: ", as.character(ramclustObj$ExpDes[[2]][which(row.names(ramclustObj$ExpDes[[2]]) == "CE2"),1]), '\n') }
"MSTYPE: ", "MS1", '\n',
"Num Peaks: ", nrow(ms), '\n', sep="")
for(i in 1:nrow(ms)) {
out<-paste(out, ms[i,1], " ", ms[i,2], '\n', sep="")
}
out<-paste(
"NAME: ", ramclustObj$cmpd[cl], '\n',
"RETENTIONTIME: ", round(ramclustObj$clrt[cl], digits=2), '\n',
"PRECURSORMZ: ", prcmz, '\n',
"PRECURSORTYPE: ", prctype, '\n',
"IONTYPE: ", mode, '\n',
"SPECTRUMTYPE: Centroid", '\n',
#if((!is.null(ramclustObj$msmsint))) {c("COLLISIONENERGY: ", as.character(ramclustObj$ExpDes[[2]][which(row.names(ramclustObj$ExpDes[[2]]) == "CE2"),1]), '\n') }
"MSTYPE: ", "MS1", '\n',
"Num Peaks: ", nrow(ms), '\n', sep="")
for(i in 1:nrow(ms)) {
out<-paste(out, ms[i,1], " ", ms[i,2], '\n', sep="")
}
out<-paste(
"NAME: ", ramclustObj$cmpd[cl], '\n',
"RETENTIONTIME: ", round(ramclustObj$clrt[cl], digits=2), '\n',
"PRECURSORMZ: ", prcmz, '\n',
"PRECURSORTYPE: ", prctype, '\n',
"IONTYPE: ", mode, '\n',
"SPECTRUMTYPE: Centroid", '\n',
if((!is.null(ramclustObj$msmsint))) {"COLLISIONENERGY: ", as.character(ramclustObj$ExpDes[[2]][which(row.names(ramclustObj$ExpDes[[2]]) == "CE2"),1]), '\n' },
"MSTYPE: ", "MS1", '\n',
"Num Peaks: ", nrow(ms), '\n', sep="")
for(i in 1:nrow(ms)) {
out<-paste(out, ms[i,1], " ", ms[i,2], '\n', sep="")
}
out<-paste(
"NAME: ", ramclustObj$cmpd[cl], '\n',
"RETENTIONTIME: ", round(ramclustObj$clrt[cl], digits=2), '\n',
"PRECURSORMZ: ", prcmz, '\n',
"PRECURSORTYPE: ", prctype, '\n',
"IONTYPE: ", mode, '\n',
"SPECTRUMTYPE: Centroid", '\n',
if((!is.null(ramclustObj$msmsint))) {"COLLISIONENERGY: ", as.character(ramclustObj$ExpDes[[2]][which(row.names(ramclustObj$ExpDes[[2]]) == "CE2"),1]), '\n' }
"MSTYPE: ", "MS1", '\n',
"Num Peaks: ", nrow(ms), '\n', sep="")
for(i in 1:nrow(ms)) {
out<-paste(out, ms[i,1], " ", ms[i,2], '\n', sep="")
}
out<-paste(
"NAME: ", ramclustObj$cmpd[cl], '\n',
"RETENTIONTIME: ", round(ramclustObj$clrt[cl], digits=2), '\n',
"PRECURSORMZ: ", prcmz, '\n',
"PRECURSORTYPE: ", prctype, '\n',
"IONTYPE: ", mode, '\n',
"SPECTRUMTYPE: Centroid", '\n',
if((!is.null(ramclustObj$msmsint))) {paste("COLLISIONENERGY: ", as.character(ramclustObj$ExpDes[[2]][which(row.names(ramclustObj$ExpDes[[2]]) == "CE2"),1]), '\n', sep="")}
"MSTYPE: ", "MS1", '\n',
"Num Peaks: ", nrow(ms), '\n', sep="")
for(i in 1:nrow(ms)) {
out<-paste(out, ms[i,1], " ", ms[i,2], '\n', sep="")
}
out<-paste(
"NAME: ", ramclustObj$cmpd[cl], '\n',
"RETENTIONTIME: ", round(ramclustObj$clrt[cl], digits=2), '\n',
"PRECURSORMZ: ", prcmz, '\n',
"PRECURSORTYPE: ", prctype, '\n',
"IONTYPE: ", mode, '\n',
"SPECTRUMTYPE: Centroid", '\n',
if((!is.null(ramclustObj$msmsint))) {paste("COLLISIONENERGY: ", as.character(ramclustObj$ExpDes[[2]][which(row.names(ramclustObj$ExpDes[[2]]) == "CE2"),1]), '\n', sep="")},
"MSTYPE: ", "MS1", '\n',
"Num Peaks: ", nrow(ms), '\n', sep="")
for(i in 1:nrow(ms)) {
out<-paste(out, ms[i,1], " ", ms[i,2], '\n', sep="")
}
out
if(!is.null(ramclustObj$msmsint)) {
do<-which(ramclustObj$featclus == cl)
msms<-cbind(
'mz' = ramclustObj$fmz[do],
'int' = ramclustObj$msmsint[do])
msms<-msms[which(msms[,"mz"] <= (prcmz + 3)),, drop = FALSE]
msms<-msms[order(msms[,"int"], decreasing=TRUE),]
if(nrow(msms)>0) {
out <- paste (out,
"MSTYPE:" , "MS2", '\n' ,
"Num Peaks: ", nrow(msms), '\n',
sep="")
for(i in 1:nrow(msms)) {
out<-paste(out, msms[i,1], " ", msms[i,2], '\n', sep="")
}
}
}
write(out, file=paste0("spectra/mat/", ramclustObj$cmpd[cl], ".mat"))
source('~/GitHub/RAMClustR/R/do.findmain.R')
source('~/GitHub/RAMClustR/R/do.findmain.R')
ramclustObj<-do.findmain(RC, cmpd=c(1:10))
ramclustObj$M
source('~/GitHub/RAMClustR/R/do.findmain.R')
source('~/GitHub/RAMClustR/R/do.findmain.R')
source('~/GitHub/RAMClustR/R/do.findmain.R')
source('~/GitHub/RAMClustR/R/do.findmain.R')
source('~/GitHub/RAMClustR/R/do.findmain.R')
list.dirs()
any(list.dirs() == "spectra"
)
dir.exists("spectra")
source('~/GitHub/RAMClustR/R/do.findmain.R')
source('~/GitHub/RAMClustR/R/do.findmain.R')
source('~/GitHub/RAMClustR/R/do.findmain.R')
devtools::use_vignette()
devtools::use_vignette("RAMClustR")
detach("package:RAMClustR")
detach('package:RAMClustR')
devtools::install_github("cbroeckl/RAMClustR")
library(RAMClustR)
vignette(ramclustR)
vignette("ramclustR")
??ramclustR
detach('package:RAMClustR')
devtools::install_github("cbroeckl/RAMClustR", force = TRUE, vignette = TRUE)
library(RAMClustR)
??ramclustR
?vignette
vignette(package = "RAMClustR")
devtools::use_vignette
devtools::use_vignette("RAMClustR")
?devtools::install_github
devtools::install_github("cbroeckl/RAMClustR", force = TRUE, build_vignettes = TRUE)
??ramclustR
devtools::install_github("cbroeckl/RAMClustR", force = TRUE, build_vignettes = TRUE, dependencies = TRUE)
source('~/GitHub/RAMClustR/R/do.findmain.R', encoding = 'UTF-8')
source('~/GitHub/RAMClustR/R/Params.R')
ExpDes<-defineExperiment(force.ski= = TRUE)
ExpDes<-defineExperiment(force.skip = TRUE)
force.skip
read.csv(paste(find.package("RAMClustR"), "/params/params.csv", sep=""), header=TRUE, check.names=FALSE)
read.csv(paste(find.package("RAMClustR"), "/params/params.csv", sep=""), header=TRUE, check.names=FALSE)[7,1]
read.csv(paste(find.package("RAMClustR"), "/params/params.csv", sep=""), header=TRUE, check.names=FALSE)[7,2]
csv.in[7,2]<-"LC-MS"
source('~/GitHub/RAMClustR/R/Params.R')
ExpDes<-defineExperiment(force.skip = TRUE)
source('~/GitHub/RAMClustR/R/Params.R')
csv.in<-read.csv(file=paste(getwd(), "/ExpDes.csv", sep=""), header=TRUE, check.names=FALSE) } else {
csv.in<-read.csv(file=paste(getwd(), "/ExpDes.csv", sep=""), header=TRUE, check.names=FALSE)
out<-read.csv(paste(find.package("RAMClustR"), "/params/params.csv", sep=""), header=TRUE, check.names=FALSE)
csv.in <-out
csv.in[7,2]
csv.in[7,2]<-'LC-MS'
supressWarnings(csv.in[7,2]<-'LC-MS')
suppresWarnings(csv.in[7,2]<-'LC-MS')
suppressWarnings()
suppressWarnings(csv.in[7,2]<-'LC-MS')
csv.in
csv.in[7,2]
suppressWarnings(csv.in[7,2]<-'LC-MS')
csv.in
suppressWarnings(csv.in[7,2]<-as.character('LC-MS'))
csv.in
out<-read.csv(paste(find.package("RAMClustR"), "/params/params.csv", sep=""), header=TRUE, check.names=FALSE)
out
csv.in <-out
csv.in
csv.in[7,2]
out<-read.csv(paste(find.package("RAMClustR"), "/params/params.csv", sep=""), header=TRUE, check.names=FALSE, stringsAsFactors = FALSE)
out
csv.in <-out
suppressWarnings(csv.in[7,2]<-'LC-MS')
csv.in
source('~/GitHub/RAMClustR/R/Params.R')
ExpDes<-defineExperiment(force.skip = TRUE)
ExpDes
source('~/GitHub/RAMClustR/R/Params.R')
ExpDes<-defineExperiment(force.skip = TRUE)
ExpDes
source('~/GitHub/RAMClustR/R/Params.R')
which(csv.in[,1]=="MSlevs")
csv.in
which(csv.in[,1]=="Mslevs")
source('~/GitHub/RAMClustR/R/Params.R')
ExpDes<-defineExperiment(force.skip = TRUE)
ExpDes
source('~/GitHub/RAMClustR/R/Params.R')
source('~/GitHub/RAMClustR/R/Params.R')
source('~/GitHub/RAMClustR/R/Params.R')
source('~/GitHub/RAMClustR/R/Params.R')
?defineExperiment
source('~/GitHub/RAMClustR/R/Params.R')
devtools::build()
install.packages("~/GitHub/RAMClustR_0.4.tar.gz", repos = NULL, type = "source")
??ramclustR
?defineExperiment
source('~/GitHub/RAMClustR/R/Params.R')
source('~/GitHub/RAMClustR/R/Params.R')
source('~/GitHub/RAMClustR/R/Params.R')
source('~/GitHub/RAMClustR/R/Params.R')
source('~/GitHub/RAMClustR/R/Params.R')
source('~/GitHub/RAMClustR/R/do.findmain.R', encoding = 'UTF-8')
?build
devtools::build(vignettes = TRUE, manual = TRUE)
devtools::install_github('cbroeckl/RAMClustR', force = TRUE, build_vignettes = TRUE )
source('~/GitHub/RAMClustR/R/do.findmain.R', encoding = 'UTF-8')
source('~/GitHub/RAMClustR/R/ramclustR.R')
source('~/GitHub/RAMClustR/R/Params.R')
detach('package:RAMClustR')
unload('RAMClustR')
??unload
install_github("cbroeckl/RAMClustR", build_vignettes = TRUE)
devtools::install_github("cbroeckl/RAMClustR", build_vignettes = TRUE)
devtools::install_github("cbroeckl/RAMClustR")
build()
devtools::build()
install.packages("~/GitHub/RAMClustR_0.4.tar.gz", repos = NULL, type = "source")
?ramclustR
?ramclustR
devtools::build(build_vignette = TRUE)
