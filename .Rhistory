instrument<-"LC-MS"
}
}
rowstart<-grep(instrument, csv.in[,1])+1
rowend<-grep("Mslevs", csv.in[,1])
rowend<-rowend[which(rowend > rowstart)]
if(length(rowend)>1) {
rowend<-rowend[which.min((rowend - rowstart))]
}
instrument <- data.frame('value' = csv.in[rowstart:rowend,2], row.names = csv.in[rowstart:rowend,1])
ExpDes <- list("design" = design, "instrument" = instrument)
}  else {
instrument <- NULL
suppressWarnings( design<-edit(Experiment))
suppressWarnings( instrument<-edit(instrument))
ExpDes<-list("design" = design, "instrument" = instrument)
}
} else  {
if(file.exists(csv)) {
csv.in <- read.csv(csv, header=TRUE, check.names=FALSE)
}
}
load(system.file('params/defparamsets.Rdata', package = "RAMClustR"))
return(exp.pars)
}
data.frame("value" = csv.in[3:7,2], row.names = csv.in[3:7,1])
design
Experiment<-data.frame("Value" = rep("", 5),
"Description" = c("experiment name, no spaces",
"species name",
"sample type",
"individual and/or organizational affiliation",
"GC-MS or LC-MS"),
row.names = c("Experiment",
"Species",
"Sample",
"Contributor",
"platform"))
Experiment
LCMS <- data.frame("value" = c(chrominst="",
msinst="",
column="",
solvA="",
solvB="",
CE1="",
CE2="",
mstype="",
msmode="",
ionization="",
colgas="",
msscanrange="",
conevolt="",
MSlevs=1))
GCMS <- data.frame("value" = c(chrominst="",
msinst="",
column="",
InletTemp="",
TransferTemp="",
mstype="",
msmode="",
ionization="",
msscanrange="",
scantime="",
deriv="",
MSlevs=1))
Experiment<-data.frame("Value" = rep("", 5),
"Description" = c("experiment name, no spaces",
"species name",
"sample type",
"individual and/or organizational affiliation",
"GC-MS or LC-MS"),
row.names = c("Experiment",
"Species",
"Sample",
"Contributor",
"platform"))
defineExperiment<-function(csv = TRUE) {
LCMS <- data.frame("value" = c(chrominst="",
msinst="",
column="",
solvA="",
solvB="",
CE1="",
CE2="",
mstype="",
msmode="",
ionization="",
colgas="",
msscanrange="",
conevolt="",
MSlevs=1))
GCMS <- data.frame("value" = c(chrominst="",
msinst="",
column="",
InletTemp="",
TransferTemp="",
mstype="",
msmode="",
ionization="",
msscanrange="",
scantime="",
deriv="",
MSlevs=1))
Experiment<-data.frame("Value" = rep("", 5),
"Description" = c("experiment name, no spaces",
"species name",
"sample type",
"individual and/or organizational affiliation",
"GC-MS or LC-MS"),
row.names = c("Experiment",
"Species",
"Sample",
"Contributor",
"platform"))
LCMS <- data.frame("value" = c(chrominst="",
msinst="",
column="",
solvA="",
solvB="",
CE1="",
CE2="",
mstype="",
msmode="",
ionization="",
colgas="",
msscanrange="",
conevolt="",
MSlevs=1))
GCMS <- data.frame("value" = c(chrominst="",
msinst="",
column="",
InletTemp="",
TransferTemp="",
mstype="",
msmode="",
ionization="",
msscanrange="",
scantime="",
deriv="",
MSlevs=1))
Experiment<-data.frame("Value" = rep("", 5),
"Description" = c("experiment name, no spaces",
"species name",
"sample type",
"individual and/or organizational affiliation",
"GC-MS or LC-MS"),
row.names = c("Experiment",
"Species",
"Sample",
"Contributor",
"platform"))
(is.logical(csv))
design<-data.frame("value" = csv.in[3:7,2], row.names = csv.in[3:7,1])
design
plat<-as.character(design[5,2])
plat
plat<-as.character(design[5,1])
plat
if(grepl("LC-MS", plat)) {
instrument<-"LC-MS"
}
if( grepl("GC-MS", plat )) {
instrument<-"GC-MS"
}
if(!grepl("LC-MS", plat ) & !grepl("GC-MS", plat ) ) {
if(grepl('[Gg]',  substring(plat,1,1))) {
instrument<-"GC-MS"
}
if(grepl('[Ll]',  substring(plat,1,1))) {
instrument<-"LC-MS"
}
}
instrument
rowstart<-grep(instrument, csv.in[,1])+1
rowstart
rowend<-grep("Mslevs", csv.in[,1])
rowend<-rowend[which(rowend > rowstart)]
if(length(rowend)>1) {
rowend<-rowend[which.min((rowend - rowstart))]
}
rowend
instrument <- data.frame('value' = csv.in[rowstart:rowend,2], row.names = csv.in[rowstart:rowend,1])
instrument
ExpDes <- list("design" = design, "instrument" = instrument)
Experiment<-data.frame("Value" = rep("", 5),
"Description" = c("experiment name, no spaces",
"species name",
"sample type",
"individual and/or organizational affiliation",
"GC-MS or LC-MS"),
row.names = c("Experiment",
"Species",
"Sample",
"Contributor",
"platform"))
suppressWarnings( design<-edit(Experiment))
plat<-as.character(design[5,1])
plat
if(grepl("LC-MS", plat)) {
instrument<-"LC-MS"
}
if( grepl("GC-MS", plat )) {
instrument<-"GC-MS"
}
if(!grepl("LC-MS", plat ) & !grepl("GC-MS", plat ) ) {
if(grepl('[Gg]',  substring(plat,1,1))) {
instrument<-"GC-MS"
}
if(grepl('[Ll]',  substring(plat,1,1))) {
instrument<-"LC-MS"
}
}
if(is.null(instrument)) {
stop("do not regonize instrument platform, please use either 'GC-MS' or 'LC-MS' " )
}
instrument
LCMS
instrument
instrument<-LCMS
instrument
design
Experiment
plat<-as.character(design[5,1])
if(grepl("LC-MS", plat)) {
instrument<-"LC-MS"
}
if( grepl("GC-MS", plat )) {
instrument<-"GC-MS"
}
if(!grepl("LC-MS", plat ) & !grepl("GC-MS", plat ) ) {
if(grepl('[Gg]',  substring(plat,1,1))) {
instrument<-"GC-MS"
}
if(grepl('[Ll]',  substring(plat,1,1))) {
instrument<-"LC-MS"
}
}
if(is.null(instrument)) {
stop("do not regonize instrument platform, please use either 'GC-MS' or 'LC-MS' " )
}
plat<-as.character(design[5,1])
if(grepl("LC-MS", plat)) {
instrument<-"LC-MS"
}
if( grepl("GC-MS", plat )) {
instrument<-"GC-MS"
}
if(!grepl("LC-MS", plat ) & !grepl("GC-MS", plat ) ) {
if(grepl('[Gg]',  substring(plat,1,1))) {
instrument<-"GC-MS"
}
if(grepl('[Ll]',  substring(plat,1,1))) {
instrument<-"LC-MS"
}
}
if(is.null(instrument)) {
stop("do not regonize instrument platform, please use either 'GC-MS' or 'LC-MS' " )
}
if(instrument = "LC-MS") instrument<-LCMS
suppressWarnings( instrument<-edit(instrument))
instrument
if(instrument = "GC-MS") instrument<-GCMS
instrument
if(instrument == "LC-MS") instrument<-LCMS
if(instrument == "GC-MS") instrument<-GCMS
plat<-as.character(design[5,1])
if(grepl("LC-MS", plat)) {
instrument<-"LC-MS"
}
if( grepl("GC-MS", plat )) {
instrument<-"GC-MS"
}
if(!grepl("LC-MS", plat ) & !grepl("GC-MS", plat ) ) {
if(grepl('[Gg]',  substring(plat,1,1))) {
instrument<-"GC-MS"
}
if(grepl('[Ll]',  substring(plat,1,1))) {
instrument<-"LC-MS"
}
}
if(is.null(instrument)) {
stop("do not regonize instrument platform, please use either 'GC-MS' or 'LC-MS' " )
}
instrument
if(instrument == "LC-MS") platform<-LCMS
if(instrument == "GC-MS") platform<-GCMS
instrument <- platform
instrument
suppressWarnings( instrument<-edit(instrument))
xset
knitr::opts_chunk$set(echo = TRUE)
cdfpath <- system.file("cdf", package = "faahKO")
xset <- xcmsSet(cdffiles)  # detect features
library(xcms)
library(xcms)
library(faahKO)
cdfpath <- system.file("cdf", package = "faahKO")
cdffiles <- list.files(cdfpath, recursive = TRUE, full.names = TRUE)
xset <- xcmsSet(cdffiles)  # detect features
xset <- group(xset)  # group features across samples by retention time and mass
xset <- retcor(xset, family = "symmetric", plottype = NULL)  # correct for drive in retention time
xset <- group(xset, bw = 10)  # regroup following rt correction
xset <- fillPeaks(xset)  # 'fillPeaks' to remove missing values in final dataset
experiment <- defineExperiment(csv = TRUE)
source('~/GitHub/RAMClustR/R/ramclustR.R')
xset
RC<-ramclustR(xset, ExpDes = ExpDes)
source('~/GitHub/RAMClustR/R/ramclustR.R')
source('~/GitHub/RAMClustR/R/ramclustR.R')
source('~/GitHub/RAMClustR/R/ramclustR.R')
source('~/GitHub/RAMClustR/R/ramclustR.R')
source('~/GitHub/RAMClustR/R/ramclustR.R')
RC<-ramclustR(xset, ExpDes = ExpDes, mzdec=2)
source('~/GitHub/RAMClustR/R/ramclustR.R')
RC<-ramclustR(xset, ExpDes = ExpDes, mzdec=2)
format(1, digits=4)
?format
format(1, width =4)
??formatC
?formatC
formatC(1, digits=4)
formatC(1, digits=4, flag=0)
formatC(10, digits=4, flag=0)
formatC(100, digits=4, flag=0)
strl<-nchar(max(RC$featclus))
strl
paste("C", formatC(1:length(RC$clrt), digits = strl, flag = 0 ) , sep="")
strl<-nchar(max(RC$featclus)) - 1
paste("C", formatC(1:length(RC$clrt), digits = strl, flag = 0 ) , sep="")
source('~/GitHub/RAMClustR/R/ramclustR.R')
source('~/GitHub/RAMClustR/R/ramclustR.R')
ExpDes
source('~/GitHub/RAMClustR/R/ramclustR.R')
source('~/GitHub/RAMClustR/R/ramclustR.R')
source('~/GitHub/RAMClustR/R/ramclustR.R')
library(xcms)
library(faahKO)
cdfpath <- system.file("cdf", package = "faahKO")
cdffiles <- list.files(cdfpath, recursive = TRUE, full.names = TRUE)
xset <- xcmsSet(cdffiles)  # detect features
xset <- group(xset)  # group features across samples by retention time and mass
xset <- retcor(xset, family = "symmetric", plottype = NULL)  # correct for drive in retention time
xset <- group(xset, bw = 10)  # regroup following rt correction
xset <- fillPeaks(xset)  # 'fillPeaks' to remove missing values in final dataset
library(devtools)
install_github("cbroeckl/RAMClustR")
library(RAMClustR)
??ramclustR
detach('package::RAMClustR')
detach(package::RAMClustR)
detach("package:RAMClustR")
ramclustR
install_github("cbroeckl/RAMClustR")
?RAMClustR
library(RAMClustR)
?RAMClustR
??RAMClustR
detach('package:RAMClustR')
library(devtools)
install_github("cbroeckl/RAMClustR")
library(RAMClustR)
library(devtools)
install_github("cbroeckl/RAMClustR")
library(RAMClustR)
??ramclustR
?ramclustR
??ramclustR
detach("package:RAMClustR")
library(devtools)
install_github("cbroeckl/RAMClustR")
library(RAMClustR)
??ramclustR
vignette("ramclustR")
vignette("RAMClustR")
devtools::build()
install.packages("~/GitHub/RAMClustR_0.4.tar.gz", repos = NULL, type = "source")
library(RAMClustR)
vignette("ramclustR.vignette")
devtools::build().
devtools::build()
library(devtools)
install_github("cbroeckl/RAMClustR")
library(RAMClustR)
vignette("ramclustR.vignette")
??ramclustR
library(RAMClustR)
vignett('ramclustR')
vignette('ramclustR')
vignette('RAMClustR')
?ramclusteR
?ramclustR
install_github("cbroeckl/RAMClustR")
library(devtools)
install_github("cbroeckl/RAMClustR")
library(ramclustR)
library(RAMClustR)
vignette(RAMClustR)
index(ramclustR
)
?ramclsutR
?ramclustR
detach('package:RAMClustR')
unload(pkg = "RAMClustR")
install_github("cbroeckl/RAMClustR")
library(RAMClustR)
??ramclustR
library(RAMClustR)
?ramclustR
detach('library:RAMClustR')
detach('package:RAMClustR')
library(devtools)
install_github('cbroeckl/RAMClustR')
install_github('cbroeckl/RAMClustR', use_vignette = TRUE)
install_github('cbroeckl/RAMClustR', use_vignette = TRUE, force = TRUE)
library(RAMClustR)
??ramclustR
??ramclustR
write(outfile=paste0(getwd(), "/spectra/mat/", ramclustObj$cmpd[cl], ".mat"))
ms<-matrix(rnorm(18),nrow=6)
ms
ms<-matrix(rnorm(18, mean = 100),nrow=6)
ms
ms<-matrix(rnorm(18, mean = 100, sd = 30),nrow=6)
ms
ramclustObj$cmpd[cl]<-10
ramclustObj<-list()
cl<-10
ramclustObj$cmpd[cl]<-paste("C00", 10, sep="")
prcmz = sample(cl[,1], 1)
ms
prcmz = sample(ms[,1], 1)
prcmz
cl<-10
ms<-matrix(rnorm(18, mean = 100, sd = 30),nrow=6)
ramclustObj<-list()
ramclustObj$cmpd[cl]<-paste("C00", cl, sep="")
prcmz = sample(ms[,1], 1)
prctype <- "[M+H]+"
out<-paste(
"NAME: ", ramclustObj$cmpd[cl], '\n',
"PRECURSORMZ: ", prcmz, '\n',
"PRECURSORTYPE: ", prctype, '\n',
"IONMODE: ", mode, '\n',
"MSTYPE: ", if(!is.null(ramclustObj$msmsint)) {"MS1"} else {"MS2"}, '\n',
"Num Peaks: ", nrow(ms), '\n',
as.matrix(ms[,1:2]))
out<-paste(
"NAME: ", ramclustObj$cmpd[cl], '\n',
"PRECURSORMZ: ", prcmz, '\n',
"PRECURSORTYPE: ", prctype, '\n',
"IONMODE: ", mode, '\n',
"MSTYPE: ", if(!is.null(ramclustObj$msmsint)) {"MS1"} else {"MS2"}, '\n',
"Num Peaks: ", nrow(ms), '\n')
ramclustObj$cmpd[cl]
!is.null(ramclustObj$msmsint)
ramclustObj$msmsint<-TRUE
(!is.null(ramclustObj$msmsint))
nrow(ms)
prcmz
prctype
mode
mode="positive"
out<-paste(
"NAME: ", ramclustObj$cmpd[cl], '\n',
"PRECURSORMZ: ", prcmz, '\n',
"PRECURSORTYPE: ", prctype, '\n',
"IONMODE: ", mode, '\n',
"MSTYPE: ", if(!is.null(ramclustObj$msmsint)) {"MS1"} else {"MS2"}, '\n',
"Num Peaks: ", nrow(ms), '\n')
out
cat(out)
for(i in 1:nrow(ms)) {
out<-paste(out, ms[i,1], ms[i,2], '\n')
}
out
cat(out)
write(out, file="test.msp")
out<-paste(
"NAME: ", ramclustObj$cmpd[cl], '\n',
"PRECURSORMZ: ", prcmz, '\n',
"PRECURSORTYPE: ", prctype, '\n',
"IONMODE: ", mode, '\n',
"MSTYPE: ", if(!is.null(ramclustObj$msmsint)) {"MS1"} else {"MS2"}, '\n',
"Num Peaks: ", nrow(ms), '\n', sep="")
"Num Peaks: ", nrow(ms), '\n', sep="")
for(i in 1:nrow(ms)) {
out<-paste(out, ms[i,1], ms[i,2], '\n')
}
out
write(out, file="test.msp")
out<-paste(
"NAME: ", ramclustObj$cmpd[cl], '\n',
"PRECURSORMZ: ", prcmz, '\n',
"PRECURSORTYPE: ", prctype, '\n',
"IONMODE: ", mode, '\n',
"MSTYPE: ", if(!is.null(ramclustObj$msmsint)) {"MS1"} else {"MS2"}, '\n',
"Num Peaks: ", nrow(ms), '\n', sep="")
for(i in 1:nrow(ms)) {
out<-paste(out, ms[i,1], ms[i,2], '\n', sep="")
}
write(out, file="test.msp")
out<-paste(
"NAME: ", ramclustObj$cmpd[cl], '\n',
"PRECURSORMZ: ", prcmz, '\n',
"PRECURSORTYPE: ", prctype, '\n',
"IONMODE: ", mode, '\n',
"MSTYPE: ", if(!is.null(ramclustObj$msmsint)) {"MS1"} else {"MS2"}, '\n',
"Num Peaks: ", nrow(ms), '\n', sep="")
for(i in 1:nrow(ms)) {
out<-paste(out, ms[i,1], " ", ms[i,2], '\n', sep="")
}
write(out, file="test.msp")
