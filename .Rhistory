## ----masterFdr, cache=TRUE-------------------------------------------------
## using the full set of 6 HDMSe files and a
## fasta database from the synapterdata package
inputfiles <- getHDMSeFinalPeptide()
fasta <- getFasta()
cmb <- estimateMasterFdr(inputfiles, fasta, masterFdr = 0.02)
cmb
## ----estimateFdrPlot, fig.cap="Figure illustrating the relation between the number of unique peptides in the combined HDMS$^E$ file and the resulting false discovery rate. The symbols on the figure represent the number of files for that particular combination. The dotted line is the user defined threshold for the combined FDR (`masterFdr` parameter). The best combination, i.e the one that maximises the number of unique peptides while keeping the FDR below `masterFdr` is highlighted in red."----
plot(cmb)
system("C:\IMTBX\IMTBX.exe peaks -vw --bounds_im 0 0 --bounds_mz 0 0 --clean True --cut 100 --digits 5 3 1 4 --drop 0.1 --
filter 1 1 1 1 1 1 --hyper 0.4 0.5 0.5 -i C:\Users\cbroeckl\Dropbox\temp\SynaptProteomicsShare\2018JUN012_002.raw --
imsr 20 0 100 --index True --lock True --lockmass 556.2771 0.5 --locksmooth 10 -n True --noise True --noiseWnd 2 4 --
npts 9 --npts1d 3 -o 20180615e --orig --scansPerThread 1 --snr 1.5 --threads 1 --tol 0.01")
paste(
"C:\\IMTBX\\IMTBX.exe peaks",
"-vw --bounds_im 0 0 --bounds_mz 0 0 --clean True --cut 100 --digits 5 3 1 4 --drop 0.1",
"-- filter 1 1 1 1 1 1 --hyper 0.4 0.5 0.5",
"-i C:\Users\cbroeckl\Dropbox\temp\SynaptProteomicsShare\2018JUN012_002.raw",
"--   imsr 20 0 100 --index True --lock True --lockmass 556.2771 0.5 --locksmooth 10",
"-n True --noise True --noiseWnd 2 4 -- npts 9 --npts1d 3",
"-o 20180615e --orig --scansPerThread 1 --snr 1.5 --threads 1 --tol 0.01",
)
paste(
"C:\\IMTBX\\IMTBX.exe peaks",
"-vw --bounds_im 0 0 --bounds_mz 0 0 --clean True --cut 100 --digits 5 3 1 4 --drop 0.1",
"-- filter 1 1 1 1 1 1 --hyper 0.4 0.5 0.5",
"-i C:\\Users\\cbroeckl\\Dropbox\\temp\\SynaptProteomicsShare\\2018JUN012_002.raw",
"--   imsr 20 0 100 --index True --lock True --lockmass 556.2771 0.5 --locksmooth 10",
"-n True --noise True --noiseWnd 2 4 -- npts 9 --npts1d 3",
"-o 20180615e --orig --scansPerThread 1 --snr 1.5 --threads 1 --tol 0.01",
)
paste(
"C:\\IMTBX\\IMTBX.exe peaks",
"-vw --bounds_im 0 0 --bounds_mz 0 0 --clean True --cut 100 --digits 5 3 1 4 --drop 0.1",
"-- filter 1 1 1 1 1 1 --hyper 0.4 0.5 0.5",
"-i C:\\Users\\cbroeckl\\Dropbox\\temp\\SynaptProteomicsShare\\2018JUN012_002.raw",
"--   imsr 20 0 100 --index True --lock True --lockmass 556.2771 0.5 --locksmooth 10",
"-n True --noise True --noiseWnd 2 4 -- npts 9 --npts1d 3",
"-o 20180615e --orig --scansPerThread 1 --snr 1.5 --threads 1 --tol 0.01"
)
system(
paste(
"C:\\IMTBX\\IMTBX.exe peaks",
"-vw --bounds_im 0 0 --bounds_mz 0 0 --clean True --cut 100 --digits 5 3 1 4 --drop 0.1",
"-- filter 1 1 1 1 1 1 --hyper 0.4 0.5 0.5",
"-i C:\\Users\\cbroeckl\\Dropbox\\temp\\SynaptProteomicsShare\\2018JUN012_002.raw",
"--   imsr 20 0 100 --index True --lock True --lockmass 556.2771 0.5 --locksmooth 10",
"-n True --noise True --noiseWnd 2 4 -- npts 9 --npts1d 3",
"-o 20180615e --orig --scansPerThread 1 --snr 1.5 --threads 1 --tol 0.01"
)
)
paste(
"C:\\IMTBX\\IMTBX.exe peaks",
"-vw --bounds_im 0 0 --bounds_mz 0 0 --clean True --cut 100 --digits 5 3 1 4 --drop 0.1",
"-- filter 1 1 1 1 1 1 --hyper 0.4 0.5 0.5",
"-i C:\\Users\\cbroeckl\\Dropbox\\temp\\SynaptProteomicsShare\\2018JUN012_002.raw",
"--   imsr 20 0 100 --index True --lock True --lockmass 556.2771 0.5 --locksmooth 10",
"-n True --noise True --noiseWnd 2 4 -- npts 9 --npts1d 3",
"-o 20180615e --orig --scansPerThread 1 --snr 1.5 --threads 1 --tol 0.01"
)
paste(
"C:/IMTBX/IMTBX.exe peaks",
"-vw --bounds_im 0 0 --bounds_mz 0 0 --clean True --cut 100 --digits 5 3 1 4 --drop 0.1",
"-- filter 1 1 1 1 1 1 --hyper 0.4 0.5 0.5",
"-i C:/Users/cbroeckl/Dropbox/temp/SynaptProteomicsShare/2018JUN012_002.raw",
"--   imsr 20 0 100 --index True --lock True --lockmass 556.2771 0.5 --locksmooth 10",
"-n True --noise True --noiseWnd 2 4 -- npts 9 --npts1d 3",
"-o 20180615e --orig --scansPerThread 1 --snr 1.5 --threads 1 --tol 0.01"
)
)
paste(
"C:/IMTBX/IMTBX.exe peaks",
"-vw --bounds_im 0 0 --bounds_mz 0 0 --clean True --cut 100 --digits 5 3 1 4 --drop 0.1",
"-- filter 1 1 1 1 1 1 --hyper 0.4 0.5 0.5",
"-i C:/Users/cbroeckl/Dropbox/temp/SynaptProteomicsShare/2018JUN012_002.raw",
"--   imsr 20 0 100 --index True --lock True --lockmass 556.2771 0.5 --locksmooth 10",
"-n True --noise True --noiseWnd 2 4 -- npts 9 --npts1d 3",
"-o 20180615e --orig --scansPerThread 1 --snr 1.5 --threads 1 --tol 0.01"
)
system(
paste(
"C:/IMTBX/IMTBX.exe peaks",
"-vw --bounds_im 0 0 --bounds_mz 0 0 --clean True --cut 100 --digits 5 3 1 4 --drop 0.1",
"-- filter 1 1 1 1 1 1 --hyper 0.4 0.5 0.5",
"-i C:/Users/cbroeckl/Dropbox/temp/SynaptProteomicsShare/2018JUN012_002.raw",
"--   imsr 20 0 100 --index True --lock True --lockmass 556.2771 0.5 --locksmooth 10",
"-n True --noise True --noiseWnd 2 4 -- npts 9 --npts1d 3",
"-o 20180615e --orig --scansPerThread 1 --snr 1.5 --threads 1 --tol 0.01"
)
)
normalizePath("C:/Users/cbroeckl/Dropbox/temp/SynaptProteomicsShare/2018JUN012_002.raw")
system(
paste(
normalizePath("C:/IMTBX/IMTBX.exe peaks"),
"-vw --bounds_im 0 0 --bounds_mz 0 0 --clean True --cut 100 --digits 5 3 1 4 --drop 0.1",
"-- filter 1 1 1 1 1 1 --hyper 0.4 0.5 0.5",
"-i",
normalizePath("C:/Users/cbroeckl/Dropbox/temp/SynaptProteomicsShare/2018JUN012_002.raw"),
"--   imsr 20 0 100 --index True --lock True --lockmass 556.2771 0.5 --locksmooth 10",
"-n True --noise True --noiseWnd 2 4 -- npts 9 --npts1d 3",
"-o 20180615e --orig --scansPerThread 1 --snr 1.5 --threads 1 --tol 0.01"
)
)
system(
paste(
normalizePath("C:/IMTBX/IMTBX.exe"), " peaks"
"-vw --bounds_im 0 0 --bounds_mz 0 0 --clean True --cut 100 --digits 5 3 1 4 --drop 0.1",
"-- filter 1 1 1 1 1 1 --hyper 0.4 0.5 0.5",
"-i",
normalizePath("C:/Users/cbroeckl/Dropbox/temp/SynaptProteomicsShare/2018JUN012_002.raw"),
"--   imsr 20 0 100 --index True --lock True --lockmass 556.2771 0.5 --locksmooth 10",
"-n True --noise True --noiseWnd 2 4 -- npts 9 --npts1d 3",
"-o 20180615e --orig --scansPerThread 1 --snr 1.5 --threads 1 --tol 0.01"
)
)
system(
paste(
normalizePath("C:/IMTBX/IMTBX.exe"), " peaks",
"-vw --bounds_im 0 0 --bounds_mz 0 0 --clean True --cut 100 --digits 5 3 1 4 --drop 0.1",
"-- filter 1 1 1 1 1 1 --hyper 0.4 0.5 0.5",
"-i",
normalizePath("C:/Users/cbroeckl/Dropbox/temp/SynaptProteomicsShare/2018JUN012_002.raw"),
"--   imsr 20 0 100 --index True --lock True --lockmass 556.2771 0.5 --locksmooth 10",
"-n True --noise True --noiseWnd 2 4 -- npts 9 --npts1d 3",
"-o 20180615e --orig --scansPerThread 1 --snr 1.5 --threads 1 --tol 0.01"
)
)
library(MSnbase)
browseVignettes("MSnbase")
file <- dir(system.file(package = "MSnbase", dir = "extdata"),
full.names = TRUE, pattern = "mzXML$")
file <- dir(system.file(package = "MSnbase", dir = "extdata"),
full.names = TRUE, pattern = "mzXML$")
file
rawdata <- readMSData(file, msLevel = 2, verbose = FALSE)
rawdata
str(rawdata)
?pSet
showClass("pSet")
centwave
?centwave
?do.centwave
??centwave
?do_findChromPeaks_centWave
do_findChromPeaks_centWave()
do_findChromPeaks_centWave
library(xcms)
do_findChromPeaks_centWave
2^20
(2^20)/200
setwd("K:/20180308-PMF-KCOOK-KC-160/TOF_PH_Pos")
####################################
library(xcms)
library(pcaMethods)
library(gplots)
library(RAMClustR)
source("K:/pmfWorkflow/pmfWorkflowFunctions.R")
####################################
load("datasets/RCobject.Rdata")
names(RC)
####################################
## define statistical model
## put entire model in quotations
## full interactions would be: "fact1*fact2*fact3"
## partial can be defined fact1 + fact2*fact3
## use the factor names you defined:
RC$ExpDes$design[6:18,]
# WARNING: ALL STATS WILL BE REMOVED
RC<-updatePhenoRC(ramclustObj=RC)
des<-getData(which.data="SpecAbund")[[1]]
dat<-getData(which.data="SpecAbund")[[2]]
des<-getData(which.data="SpecAbund")[[1]]
des
getData(which.data="SpecAbund")
dimnames(RC$SpecAbund)[[1]]
load("datasets/RCobject.Rdata")
## OPTIONAL  - if the sample names are wrong and you want to rename them
## WARNING: ALL STATS WILL BE REMOVED
####################################
## CHANGE THE PHENOTYPE DESCRIPTION FOR AN XCMS OR RAMCLUSTR OBJECT
# if phenotype needs to be changed, we can change it in the xset and in the ramclust object.  To do so,
# export the old phenotypes from the original xset:
exportPheno(xcmsObj=xset)
load("datasets/xcmsFillPeaks.Rdata")
## OPTIONAL  - if the sample names are wrong and you want to rename them
## WARNING: ALL STATS WILL BE REMOVED
####################################
## CHANGE THE PHENOTYPE DESCRIPTION FOR AN XCMS OR RAMCLUSTR OBJECT
# if phenotype needs to be changed, we can change it in the xset and in the ramclust object.  To do so,
# export the old phenotypes from the original xset:
exportPheno(xcmsObj=xset)
# WARNING: ALL STATS WILL BE REMOVED
RC<-updatePhenoRC(ramclustObj=RC)
des<-getData(which.data="SpecAbund")[[1]]
dat<-getData(which.data="SpecAbund")[[2]]
head(des)
summary(des)
table(des)
## PCA
####################################
## if you want to generate PCA figures from an unreplicated design, plot the 'specAbund' instead of the "SpecAbundAve",
## and use the anova.model to color the PCA points.  Your replicate injections fool the script into pretenting that there
## is replication.  Just remember that your replication is analytical, and your pvalues are meaningless
RC<-pmfpca(ramclustObj=RC, anova.call=NULL, npc=10, plot.name=FALSE, which.data="SpecAbund", pcut=0.05, scale="pareto")
## PCA
####################################
## if you want to generate PCA figures from an unreplicated design, plot the 'specAbund' instead of the "SpecAbundAve",
## and use the anova.model to color the PCA points.  Your replicate injections fool the script into pretenting that there
## is replication.  Just remember that your replication is analytical, and your pvalues are meaningless
RC<-pmfpca(ramclustObj=RC, anova.call=NULL, npc=10, plot.name=FALSE, which.data="SpecAbund", pcut=0.05, scale="pareto", col.by = "sn")
table(des$sn)
table(des$var)
anova.model<-"var"
## PCA
####################################
## if you want to generate PCA figures from an unreplicated design, plot the 'specAbund' instead of the "SpecAbundAve",
## and use the anova.model to color the PCA points.  Your replicate injections fool the script into pretenting that there
## is replication.  Just remember that your replication is analytical, and your pvalues are meaningless
RC<-pmfpca(ramclustObj=RC, anova.call=NULL, npc=10, plot.name=FALSE, which.data="SpecAbund", pcut=0.05, scale="pareto", col.by = "sn")
anova.model<-"var"
RC<-pmfanova2(ramclustObj=RC, anova.call=anova.model,  which.data="SpecAbundAve", p.adj="BH")
install.packages("effects")
RC<-pmfanova2(ramclustObj=RC, anova.call=anova.model,  which.data="SpecAbundAve", p.adj="BH")
install.packages("lmerTest")
dev.off()
dev.off()
RC<-pmfanova2(ramclustObj=RC, anova.call=anova.model,  which.data="SpecAbundAve", p.adj="BH")
install.packages("lsmeans")
dev.off()
RC<-pmfanova2(ramclustObj=RC, anova.call=anova.model,  which.data="SpecAbundAve", p.adj="BH")
install.packages("pbkrtest")
RC<-pmfanova2(ramclustObj=RC, anova.call=anova.model,  which.data="SpecAbundAve", p.adj="BH")
RC<-pmfanova2(ramclustObj=RC, anova.call=anova.model,  which.data="SpecAbund", p.adj="BH")
dev.off()
dev.off()
RC<-pmfanova2(ramclustObj=RC, anova.call=anova.model,  which.data="SpecAbund", p.adj="BH")
## save updated RC object with statstical results
save(RC, file="datasets/RCobject.Rdata")
####################################
## REPORT FIGURES
####################################
#draw chromatograms for reporting; by default draws all chromatograms in xcms object using base peak signal
pmfDrawChrom(xcmsObj=xset, method="bp", remmse=TRUE)
## Compound centric summary plots
####################################
##This function writes a new set of summary plots with statistical results and the annotated csv peak area dataset
pmfAnnResults(ramclustObj=RC, x.var="var",  which.data="SpecAbund", plmeth="box",
all=TRUE, page.height=4.5, page.width=20, cex.text=0.4)
pmf.heatmap(subset.met="ann", col="greenred", which.data="SpecAbund")
pdf("spectra/annotation.ClassyFire.piechart.pdf", width = 10, height = 6)
for(i in c("superclass", "class", "subclass", "parent")) {
tmp<-RC$classyfire[[i]]
tmp[which(is.na(tmp))] <- "unk"
t<-table(tmp)
l<-length(t)
j<-1
while(l > maxcat) {
j <- j+1
agnames<-names(t)[which(t <= j)]
tmp[tmp %in% agnames] <- 'other'
t<-table(tmp)
l<-length(t)
}
pie(t, cex = 2/sqrt(length(t)), main = i, init.angle = 145)
}
dev.off()
maxcat<-50
pdf("spectra/annotation.ClassyFire.piechart.pdf", width = 10, height = 6)
for(i in c("superclass", "class", "subclass", "parent")) {
tmp<-RC$classyfire[[i]]
tmp[which(is.na(tmp))] <- "unk"
t<-table(tmp)
l<-length(t)
j<-1
while(l > maxcat) {
j <- j+1
agnames<-names(t)[which(t <= j)]
tmp[tmp %in% agnames] <- 'other'
t<-table(tmp)
l<-length(t)
}
pie(t, cex = 2/sqrt(length(t)), main = i, init.angle = 145)
}
dev.off()
maxcat<-100
pdf("spectra/annotation.ClassyFire.piechart.pdf", width = 10, height = 6)
for(i in c("superclass", "class", "subclass", "parent")) {
tmp<-RC$classyfire[[i]]
tmp[which(is.na(tmp))] <- "unk"
t<-table(tmp)
l<-length(t)
j<-1
while(l > maxcat) {
j <- j+1
agnames<-names(t)[which(t <= j)]
tmp[tmp %in% agnames] <- 'other'
t<-table(tmp)
l<-length(t)
}
pie(t, cex = 2/sqrt(length(t)), main = i, init.angle = 145)
}
dev.off()
maxcat<-200
pdf("spectra/annotation.ClassyFire.piechart.pdf", width = 10, height = 6)
for(i in c("superclass", "class", "subclass", "parent")) {
tmp<-RC$classyfire[[i]]
tmp[which(is.na(tmp))] <- "unk"
t<-table(tmp)
l<-length(t)
j<-1
while(l > maxcat) {
j <- j+1
agnames<-names(t)[which(t <= j)]
tmp[tmp %in% agnames] <- 'other'
t<-table(tmp)
l<-length(t)
}
pie(t, cex = 2/sqrt(length(t)), main = i, init.angle = 145)
}
dev.off()
?pit
?pie
maxcat<-10000
pdf("spectra/annotation.ClassyFire.piechart.pdf", width = 10, height = 6)
for(i in c("superclass", "class", "subclass", "parent")) {
tmp<-RC$classyfire[[i]]
tmp[which(is.na(tmp))] <- "unk"
t<-table(tmp)
l<-length(t)
j<-1
while(l > maxcat) {
j <- j+1
agnames<-names(t)[which(t <= j)]
tmp[tmp %in% agnames] <- 'other'
t<-table(tmp)
l<-length(t)
}
pie(t, cex = 2/sqrt(length(t)), main = i, init.angle = 145)
}
dev.off()
maxcat<-50
pdf("spectra/annotation.ClassyFire.piechart.pdf", width = 10, height = 6)
for(i in c("superclass", "class", "subclass", "parent")) {
tmp<-RC$classyfire[[i]]
tmp[which(is.na(tmp))] <- "unk"
t<-table(tmp)
l<-length(t)
j<-1
while(l > maxcat) {
j <- j+1
agnames<-names(t)[which(t <= j)]
tmp[tmp %in% agnames] <- 'other'
t<-table(tmp)
l<-length(t)
}
pie(t, cex = 2/sqrt(length(t)), main = i, init.angle = 145)
}
dev.off()
install.packages("C:/Users/cbroeckl/Desktop/temp/ProbMetab_1.0.zip", repos = NULL, type = "win.binary")
browseVignettes(ProbMetab)
library(ProbMetab)
install.packages("RcppArmadillo")
library(ProbMetab)
setRepositories(graphics = getOption("menu.graphics"),
ind = NULL, addURLs = character())
setRepositories(graphics = getOption("menu.graphics"),
ind = NULL, addURLs = character())
setRepositories(graphics = getOption("menu.graphics"),
ind = NULL, addURLs = character())
setRepositories(graphics = getOption("menu.graphics"),
ind = NULL, addURLs = character())
install.packages("CAMERA")
library(ProbMetab)
?setRepositories
setRepositories(graphics = FALSE, ind = c(1:4))
install.packages("Hmisc")
setRepositories(graphics = FALSE, ind = c(2:4))
setRepositories(graphics = FALSE, ind = c(1:4))
chooseBioCmirror()
chooseCRANmirror
chooseCRANmirror()
library(devtools)
install_github("cdkr", "rajarshi/rinchi")
install_github("cdkr", "rajarshi", subdir="rinchi")
sessionInfo()
setwd("K:/Wintermantle, Bill USDA/201705_Sugarbeet_Root_Tissue/PH Stacked Pos Data")
library(xcms)
library(pcaMethods)
library(gplots)
library(RAMClustR)
source("K:/pmfWorkflow/pmfWorkflowFunctions.R")
load("datasets/RCobject.Rdata")
names(RC)
RC<-getClassyFire(RC)
annotation.summary(RC)
length(RC$syn)
length(RC$synonyms)
dim(RC$classyfire)
length(RC$clrt)
RC$synonyms <-NULL
annotation.summary(RC)
save(RC, file="datasets/RCobject.Rdata")
getwd()
setwd("K:/Wintermantle, Bill USDA/201706_Sugarbeet_GCMS")
load("datasets/RCobject.Rdata")
golm.inchikey<-function(
ramclustObj = RC,
msp = "K:/Broeckling_Corey/GMD_20111121_VAR5_ALK_MSP.txt"
) {
spec<-readLines(msp)
names<-c(grep("Name: ", spec), length(spec))
inchi <- rep(NA, length(names))
for(i in 1:(length(names)-1)) {
do<-spec[names[i]:(names[i+1])-1]
keep<-grep("Synon: METB InChIKey:", do)
if(length(keep)>0) {
if(length(keep) > 1) {
keep <- keep[1]
}
inchi[i] <- do[keep]
}
rm(do); rm(keep)
}
names<-spec[names]
names<-gsub("Name: ", "", names)
inchi<-gsub("Synon: METB InChIKey: ", "", inchi)
ramclustObj$inchikey<-rep(NA, length(ramclustObj$ann))
for(i in 1:length(ramclustObj$inchikey)) {
do<-grep(ramclustObj$ann[i], names, fixed = TRUE)
if(length(do) > 0) {
if(length(do) > 1) {
# stop()
}
ramclustObj$inchikey[i]<-inchi[do]
}
}
return(ramclustObj)
}
RC<- golm.inchikey()
RC$inchikey
RC<-getClassyFire(RC)
annotation.summary(RC)
RC
RC$classyfire
d<-read.csv("C:/Users/cbroeckl/Downloads/RC_msdata.csv", header = TRUE, check.names = FALSE)
is.numeric(d)
d[1:4,1:4]
d2<-d[,2:ncol(d)]
is.numeric(d2)
d2<-as.numeric(d2)
d[1:10,1
]
d[1:10,2]
d[1:10,3]
d[,2]
d[,1]
d<-readLines("C:/Users/cbroeckl/DownloadsRC_msdata.csv")
d<-readLines("C:/Users/cbroeckl/Downloads/RC_msdata.csv")
d[21]
head(d[21])
substr(d[21], 1:100)
substr(d[21], 1, 100)
substr(d[22], 1, 100)
substr(d[23], 1, 100)
substr(d[24], 1, 100)
d[22]<-gsub(",6ng", "_6ng" d[22], ])
substr(gsub(",6ng", "_6ng" d[22]), 1, 100)
substr(gsub(",6ng", "_6ng", d[22]), 1, 100)
d[22] <- gsub(",6ng", "_6ng", d[22])
d[23] <- gsub("1,2ng", "1_2ng", d[23])
write(d, "C:/Users/cbroeckl/Downloads/RC_msdata_v2.csv")
ds<-read.csv("C:/Users/cbroeckl/Downloads/RC_msdata.csv", check.names = FALSE, header = TRUE, stringsAsFactors = FALSE)
ds<-read.csv("C:/Users/cbroeckl/Downloads/RC_msdata.csv",
check.names = FALSE,
header = TRUE,
stringsAsFactors = FALSE,
row.names = 1)
is.numeric(ds)
ds[,1]
ds[,2]
d<-readLines("C:/Users/cbroeckl/Downloads/RC_msdata.csv")
substr(d[21], 1, 100)
d[22] <- gsub(",6ng", "_6ng", d[22])
d[23] <- gsub("1,2ng", "1_2ng", d[23])
write(d, "C:/Users/cbroeckl/Downloads/RC_msdata_v2.csv")
ds2<-read.csv("C:/Users/cbroeckl/Downloads/RC_msdata_v2.csv",
check.names = FALSE,
header = TRUE,
stringsAsFactors = FALSE,
row.names = 1)
is.numeric(ds2)
ds2[1:4,1:4]
.Library
ds2[22,1:4]
ds2[,1]
ds2[,2]
ds2[,ncol(ds2)]
substr(d[22], 1, 100)
.Library
library(roxygen2)
# build .Rd files (help)
roxygen2::roxygenise("C:/Users/cbroeckl/Documents/GitHub/RAMClustR")
# build .Rd files (help)
roxygen2::roxygenise("C:/Users/cbroeckl/Documents/GitHub/RAMClustR")
# build .Rd files (help)
roxygen2::roxygenise("C:/Users/cbroeckl/Documents/GitHub/RAMClustR")
# build .Rd files (help)
roxygen2::roxygenise("C:/Users/cbroeckl/Documents/GitHub/RAMClustR")
# build .Rd files (help)
roxygen2::roxygenise("C:/Users/cbroeckl/Documents/GitHub/RAMClustR")
# build .Rd files (help)
roxygen2::roxygenise("C:/Users/cbroeckl/Documents/GitHub/RAMClustR")
