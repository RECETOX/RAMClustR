ffmat<-ff(vmode="double", dim=c(n, n), initdata = 0) ##reset to 1 if necessary
gc()
#Sys.sleep((n^2)/10000000)
#gc()
########
# make list of all row and column blocks to evaluate
eval1<-expand.grid(0:nblocks, 0:nblocks)
names(eval1)<-c("j", "k") #j for cols, k for rows
eval1<-eval1[which(eval1[,"j"]<=eval1[,"k"]),] #upper triangle only
bl<-nrow(eval1)
cat('\n', paste("calculating ramclustR similarity: nblocks = ", bl))
cat('\n', "finished:")
########
# Define the RCsim function used to calculate feature similarities on selected blocks of data
RCsim<-function(bl)  {
cat(bl,' ')
j<-eval1[bl,"j"]  #columns
k<-eval1[bl,"k"]  #rows
startc<-min((1+(j*blocksize)), n)
if ((j+1)*blocksize > n) {
stopc<-n} else {
stopc<-(j+1)*blocksize}
startr<-min((1+(k*blocksize)), n)
if ((k+1)*blocksize > n) {
stopr<-n} else {
stopr<-(k+1)*blocksize}
if(startc<=startr) {
mint<-min(abs(outer(range(times[startr:stopr]), range(times[startc:stopc]), FUN="-")))
if(mint<=maxt) {
temp1<-round(exp(-(( (abs(outer(times[startr:stopr], times[startc:stopc], FUN="-"))))^2)/(2*(st^2))),
digits=20 )
temp2<-round (exp(-((1-(pmax(  cor(data1[,startr:stopr], data1[,startc:stopc], method=cor.method),
cor(data1[,startr:stopr], data2[,startc:stopc], method=cor.method),
cor(data2[,startr:stopr], data2[,startc:stopc], method=cor.method)  )))^2)/(2*(sr^2))),
digits=20 )
#ffcor[startr:stopr, startc:stopc]<-temp
temp<- 1-(temp1*temp2)
temp[which(is.nan(temp))]<-1
temp[which(is.na(temp))]<-1
temp[which(is.infinite(temp))]<-1
ffmat[startr:stopr, startc:stopc]<-temp
rm(temp1); rm(temp2); rm(temp)
gc()}
if(mint>maxt) {ffmat[startr:stopr, startc:stopc]<- 1}
}
gc()}
########
# Call the similarity scoring function
system.time(sapply(1:bl, RCsim))
b<-Sys.time()
########
# Report progress and timing
cat('\n','\n' )
cat(paste("RAMClust feature similarity matrix calculated and stored:",
round(difftime(b, a, units="mins"), digits=1), "minutes"))
gc()
########
# extract lower diagonal of ffmat as vector
blocksize<-mult*round(blocksize^2/n)
nblocks<-floor(n/blocksize)
remaind<-n-(nblocks*blocksize)
########
# create vector for storing dissimilarities
ramclustObj<-vector(mode="integer", length=vlength)
########
# fill vector with dissimilarities
for(k in 0:(nblocks)){
startc<-1+(k*blocksize)
if ((k+1)*blocksize > n) {
stopc<-n} else {
stopc<-(k+1)*blocksize}
temp<-ffmat[startc:nrow(ffmat),startc:stopc]
temp<-temp[which(row(temp)-col(temp)>0)]
if(exists("startv")==FALSE) startv<-1
stopv<-startv+length(temp)-1
ramclustObj[startv:stopv]<-temp
gc()
startv<-stopv+1
rm(temp)
gc()
}
rm(startv)
gc()
########
# convert vector to distance formatted object
ramclustObj<-structure(ramclustObj, Size=(n), Diag=FALSE, Upper=FALSE, method="RAMClustR", Labels=featnames, class="dist")
gc()
str(ramclustObj)
c<-Sys.time()
cat('\n', '\n')
cat(paste("RAMClust distances converted to distance object:",
round(difftime(c, b, units="mins"), digits=1), "minutes"))
########
# cleanup
delete.ff(ffmat)
rm(ffmat)
gc()
########
# cluster using fastcluster package,
system.time(ramclustObj<-hclust(ramclustObj, method=linkage))
gc()
d<-Sys.time()
cat('\n', '\n')
cat(paste("fastcluster based clustering complete:",
round(difftime(d, c, units="mins"), digits=1), "minutes"))
if(minModuleSize==1) {
clus<-cutreeDynamicTree(ramclustObj, maxTreeHeight=hmax, deepSplit=deepSplit, minModuleSize=2)
sing<-which(clus==0)
clus[sing]<-max(clus)+1:length(sing)
}
if(minModuleSize>1) {
clus<-cutreeDynamicTree(ramclustObj, maxTreeHeight=hmax, deepSplit=deepSplit, minModuleSize=minModuleSize)
}
gc()
########
# build results into ramclustObj
ramclustObj$featclus<-clus
ramclustObj$frt<-times
ramclustObj$fmz<-mzs
ramclustObj$xcmsOrd<-xcmsOrd
msint<-rep(0, length(ramclustObj$fmz))
for(i in 1:ncol(data1)){
msint[i]<-weighted.mean(data1[,i], data1[,i])
}
ramclustObj$msint<-msint
if(mslev==2) {
msmsint<-rep(0, length(ramclustObj$fmz))
for(i in 1:ncol(data1)){
msmsint[i]<-weighted.mean(data2[,i], data2[,i])
}
ramclustObj$msmsint<-msmsint
}
clrt<-aggregate(ramclustObj$frt, by=list(ramclustObj$featclus), FUN="mean")
ramclustObj$clrt<-clrt[which(clrt[,1]!=0),2]
clrtsd<-aggregate(ramclustObj$frt, by=list(ramclustObj$featclus), FUN="sd")
ramclustObj$clrtsd<-clrtsd[which(clrtsd[,1]!=0),2]
ramclustObj$nfeat<-as.vector(table(ramclustObj$featclus)[2:max(ramclustObj$featclus)])
ramclustObj$nsing<-length(which(ramclustObj$featclus==0))
e<-Sys.time()
cat('\n', '\n')
cat(paste("dynamicTreeCut based pruning complete:",
round(difftime(e, d, units="mins"), digits=1), "minutes"))
f<-Sys.time()
cat('\n', '\n')
cat(paste("RAMClust has condensed", n, "features into",  max(clus), "spectra in", round(difftime(f, a,
units="mins"), digits=1), "minutes", '\n'))
ramclustObj$ExpDes<-ExpDes
strl<-nchar(max(ramclustObj$featclus)) - 1
ramclustObj$cmpd<-paste("C", formatC(1:length(ramclustObj$clrt), digits = strl, flag = 0 ) , sep="")
# cat(ramclustObj$cmpd[1:10], '\n')
ramclustObj$ann<-ramclustObj$cmpd
ramclustObj$annconf<-rep("", length(ramclustObj$clrt))
ramclustObj$annnotes<-rep("", length(ramclustObj$clrt))
ramclustObj$MSdata<-data1
if(mslev==2) ramclustObj$MSMSdata<-data2
ramclustObj$SpecAbund)[[1]]
ramclustObj$SpecAbund)[[1]]
dimnames(ramclustObj$SpecAbund)[[1]]
ramclustObj$SpecAbund
names(ramclustObj)
cat('\n', '\n', "... collapsing features into spectra")
wts<-colSums(data1[])
ramclustObj$SpecAbund<-matrix(nrow=nrow(data1), ncol=max(clus))
for (ro in 1:nrow(ramclustObj$SpecAbund)) {
for (co in 1:ncol(ramclustObj$SpecAbund)) {
ramclustObj$SpecAbund[ro,co]<- weighted.mean(data1[ro,which(ramclustObj$featclus==co)], wts[which(ramclustObj$featclus==co)])
}
}
dimnames(ramclustObj$SpecAbund)[[2]]<-ramclustObj$cmpd
dimnames(ramclustObj$SpecAbund)
msdata
(!is.null(ms))
tmpnames1[[1]]
(!is.null(ms))
if(!is.null(ms)) {dimnames(ramclustObj$SpecAbund)[[1]]<-tmpnames1[[1]]}
dimnames(ramclustObj$SpecAbund)
if(collapse=="TRUE") {
cat('\n', '\n', "... collapsing features into spectra")
wts<-colSums(data1[])
ramclustObj$SpecAbund<-matrix(nrow=nrow(data1), ncol=max(clus))
for (ro in 1:nrow(ramclustObj$SpecAbund)) {
for (co in 1:ncol(ramclustObj$SpecAbund)) {
ramclustObj$SpecAbund[ro,co]<- weighted.mean(data1[ro,which(ramclustObj$featclus==co)], wts[which(ramclustObj$featclus==co)])
}
}
dimnames(ramclustObj$SpecAbund)[[2]]<-ramclustObj$cmpd
if(!is.null(ms)) {dimnames(ramclustObj$SpecAbund)[[1]]<-tmpnames1[[1]]}
if(!usePheno | is.null(xcmsObj)) {dimnames(ramclustObj$SpecAbund)[[1]]<-dimnames(ramclustObj$MSdata)[[1]]}
if(usePheno & !is.null(xcmsObj)) {dimnames(ramclustObj$SpecAbund)[[1]]<-as.vector(xcmsObj@phenoData[,1])[msfiles]}
g<-Sys.time()
cat('\n', '\n')
cat(paste("RAMClustR has collapsed feature quantities
into spectral quantities:", round(difftime(g, f, units="mins"), digits=1), "minutes", '\n'))
}
dimnames(ramclustObj$SpecAbund)[[1]]
rm(data1)
rm(data2)
if(!is.null(ramclustObj$SpecAbund)) {
if(length(dimnames(ramclustObj$SpecAbund)[[1]])> length(unique(dimnames(ramclustObj$SpecAbund)[[1]]))) {
ramclustObj$SpecAbundAve<-aggregate(ramclustObj$SpecAbund[,1:ncol(ramclustObj$SpecAbund)],
by=list(dimnames(ramclustObj$SpecAbund)[[1]]),
FUN="mean", simplify=TRUE)
dimnames(ramclustObj$SpecAbundAve)[[1]]<-ramclustObj$SpecAbundAve[,1]
ramclustObj$SpecAbundAve<-as.matrix(ramclustObj$SpecAbundAve[,2:ncol(ramclustObj$SpecAbundAve)])
dimnames(ramclustObj$SpecAbundAve)[[2]]<-dimnames(ramclustObj$SpecAbund)[[2]]
gc()
}
}
gc()
str(ramclustObj)
library(RAMClustR)
??ramclustR
library(roxygen2)
# build .Rd files (help)
roxygen2::roxygenise("C:/Users/cbroeckl/Documents/GitHub/RAMClustR")
flav<-matrix(nrow = 6, ncol = 50)
mets<-matrix(nrow = 6, ncol = 250)
flav<-rnorm(prod(dim(flav)))
flav
flav<-matrix(nrow = 6, ncol = 50)
mets<-matrix(nrow = 6, ncol = 250)
flav[]<-rnorm(prod(dim(flav)))
flav
mets[]<-rnorm(prod(dim(mets)))
hist(cor(flav, mets, method = "Spearman"))
hist(cor(flav, mets, method = "spearman"))
r<-cor(flav, mets, method = "spearman")
length(r)
mets<-matrix(nrow = 6, ncol = 217)
flav<-matrix(nrow = 6, ncol = 45)
mets<-matrix(nrow = 6, ncol = 217)
flav[]<-rnorm(prod(dim(flav)))
mets[]<-rnorm(prod(dim(mets)))
r<-cor(flav, mets, method = "spearman")
length(which(r>0.5))
dim(r)
keep<-which(r>0.5, arr.ind = TRUE)
keep
length(unique(keep[,2
]))
length(unique(keep[,2
]))
length(unique(keep[,2 ]))
library(Rdisop)
getMolecule("C40H56")
getMolecule("C40H57")
getMolecule("C40NH60")
f<-select.file()
f<-"C:/Users/cbroeckl/Desktop/tempHILIC_targets.csv"
d<-read.csv(f)
f<-"C:/Users/cbroeckl/Desktop/temp/HILIC_targets.csv"
d<-read.csv(f)
head(d)
clipboard(unique(d[,"cmpd"]))
(unique(d[,"cmpd"]))
writeClipboard(as.vector(unique(d[,"cmpd"])))
# returns string w/o leading whitespace
trim.leading <- function (x)  sub("^\\s+", "", x)
# returns string w/o trailing whitespace
trim.trailing <- function (x) sub("\\s+$", "", x)
# returns string w/o leading or trailing whitespace
trim <- function (x) gsub("^\\s+|\\s+$", "", x)
library(scholar)
install.packages("scholar")
ids
ids<-"bqGEr5UAAAAJ"
library(scholar)
pubs<-get_publications(ids)
pubs<-pubs[which(pubs[,"year"]>0),]
# year<-read.csv("C:/Users/cbroeckl/Downloads/citations (2).csv")[,"Year"]
year<-pubs[,"year"]
coi<-as.character(read.csv("C:/Users/cbroeckl/Downloads/citations (2).csv")[,1])
pubs
coi<-pubs[,]
auth<-vector()
for(i in 1:length(coi)) {
auth<-paste(auth, coi[i], sep=";")
}
auth<-unlist(strsplit(auth, ";"))
auth<-trim(auth)
auth<-auth[which(nchar(auth)>3)]
auth
GetPubmedPubs<-function(term="Broeckling[Author]") {
library(RISmed)
res <- EUtilsSummary(term, type="esearch", db="pubmed", datetype='pdat', retmax=500)
# QueryCount(res)
id<-ArticleId(EUtilsGet(res))
cites<-Cited(EUtilsGet(res))
author<-Author(EUtilsGet(res))
for(x in 1:length(author)) {
author[[x]]<-data.frame(author[[x]], "FullName"=paste(author[[x]][,"LastName"],  author[[x]][,"Initials"]))
}
# affiliation<-Affiliation(EUtilsGet(res))
affiliation<-author
for(x in 1:length(id)) {
tmp<-suppressWarnings( readLines(paste0("https://www.ncbi.nlm.nih.gov/pubmed/", id[x]), encoding="UTF-8"))
aut<-tmp[grep("class=\"auths\">", tmp)]
aut<- unlist(strsplit( unlist(strsplit(aut, "term=")), '"afflist\"' ))
auths<-aut[which(grepl("cauthor=", aut) & !grepl("afflist", aut)) ]
authsout<-data.frame(matrix(ncol=2, nrow=length(auths))); names(authsout)<-c("index", "author")
for(i in 1:length(auths)){
authsout[i, 1]<-as.integer(as.numeric(gsub(",", "", unlist(strsplit(  unlist(strsplit(auths[i], "<sup>"))[2], "</sup>" ))[1])  ) )
authsout[i, 2]<- unlist(strsplit(  unlist(strsplit(auths[i], '">'))[2], "</a>"  ))[1]
}
authsout[is.na(authsout[, 1]), 1]<-1
affs<-aut[grepl("author information list", aut)]
affs<-unlist(strsplit(unlist(strsplit(affs, "<sup>")), 'class=\"abstr\"'))
affs<-affs[(grep(">Author information<", affs)+1): (grep(">Abstract<", affs)-1)]
affout<-data.frame(matrix(ncol=2, nrow=length(affs))); names(affout)<-c("index", "affiliation")
for(i in 1:length(affs)){
affout[i, 1]<-as.integer(as.numeric(unlist(strsplit(affs[i], "</sup>"))[1] ) )
affout[i, 2]<- unlist(strsplit(  unlist(strsplit(affs[i], "</sup>"))[2], "</li"  ))[1]
}
authaff<-merge(authsout, affout, by="index", all.x=TRUE)
affiliation[[x]]<-authaff
}
for(x in 1:length(author)) {
author[[x]]<-merge(author[[x]], affiliation[[x]], by.x="FullName", by.y="author", all.x=TRUE)
}
title<-ArticleTitle(EUtilsGet(res))
titleAbbrev<-ISOAbbreviation(EUtilsGet(res))
year <- YearPubmed(EUtilsGet(res))
issue<-Issue(EUtilsGet(res))
volume<-Volume(EUtilsGet(res))
ab<-AbstractText(EUtilsGet(res))
return(list(
## out<-(list(
"id"=id, "cites"=cites, "author"=author, "affiliation"=affiliation,
"title"=title, "titleAbbrev"=titleAbbrev, "year"=year, "issue"=issue,
"volume"=volume, "ab"=ab
))
}
## be great to get full affiliation information...
COI<-function(pubmedpubs=pubs, nyears=4, colcsv="collaborators.csv", advcsv="advisors.csv") {
if(length(pubmedpubs$title)<1) {stop("there are no publications in this object")}
currentyear <- as.integer(as.numeric(format(Sys.Date(), "%Y")))
year<-pubmedpubs$year
keep<-which((currentyear-year)<=nyears)
if(length(keep)>0) {
authors<-data.frame(pubmedpubs$author[keep[1]][[1]],
'year'=rep(year[1], nrow(pubmedpubs$author[keep[1]][[1]])))
if(length(keep>1)) {
for(i in 2:length(keep)) {
authors<-rbind(authors, data.frame(pubmedpubs$author[keep[i]][[1]],
'year'=rep(year[i], nrow(pubmedpubs$author[keep[i]][[1]]))))
}
}
authors<-data.frame(authors)
} else {stop(cat("  -  no authors within last", nyears, "years", '\n'))}
authors<-authors[order(authors[,"affiliation"]),]
unaut<-paste(authors[,"LastName"], authors[,"Initials"])
keep<-unique(unaut)
keep<-sapply(1:length(keep), FUN=function(x) {which(unaut==keep[x])[1]})
authors<-authors[keep,]
authors<-authors[order(authors[, "LastName"]),]
write.csv(authors, file="coauthors.csv", row.names=FALSE)
write(file="coauthors.txt", paste(authors[,"FullName"], collapse="; "))
authors<-data.frame(authors, 'type'=rep("coauthor", nrow(authors)))
collab<-read.csv(colcsv, header=TRUE, check.names=FALSE)
advis<-read.csv(advcsv, header=TRUE, check.names=FALSE)
coi<-rbind(authors, collab, advis)
coi<-coi[order(coi[, "LastName"]),]
write.csv(coi, file='coi.csv', row.names=FALSE)
write(file="coi.txt", paste(coi[,"FullName"], collapse="; "))
return(authors)
}
pubs<-GetPubmedPubs()
install.packages("RISmed")
pubs<-GetPubmedPubs()
pubs
pubs<-GetPubmedPubs()
term="Broeckling[Author]"
library(RISmed)
res <- EUtilsSummary(term, type="esearch", db="pubmed", datetype='pdat', retmax=500)
# QueryCount(res)
id<-ArticleId(EUtilsGet(res))
cites<-Cited(EUtilsGet(res))
author<-Author(EUtilsGet(res))
for(x in 1:length(author)) {
author[[x]]<-data.frame(author[[x]], "FullName"=paste(author[[x]][,"LastName"],  author[[x]][,"Initials"]))
}
# affiliation<-Affiliation(EUtilsGet(res))
affiliation<-author
affiliation
cites
for(x in 1:length(id)) {
tmp<-suppressWarnings( readLines(paste0("https://www.ncbi.nlm.nih.gov/pubmed/", id[x]), encoding="UTF-8"))
aut<-tmp[grep("class=\"auths\">", tmp)]
aut<- unlist(strsplit( unlist(strsplit(aut, "term=")), '"afflist\"' ))
auths<-aut[which(grepl("cauthor=", aut) & !grepl("afflist", aut)) ]
authsout<-data.frame(matrix(ncol=2, nrow=length(auths))); names(authsout)<-c("index", "author")
for(i in 1:length(auths)){
authsout[i, 1]<-as.integer(as.numeric(gsub(",", "", unlist(strsplit(  unlist(strsplit(auths[i], "<sup>"))[2], "</sup>" ))[1])  ) )
authsout[i, 2]<- unlist(strsplit(  unlist(strsplit(auths[i], '">'))[2], "</a>"  ))[1]
}
authsout[is.na(authsout[, 1]), 1]<-1
affs<-aut[grepl("author information list", aut)]
affs<-unlist(strsplit(unlist(strsplit(affs, "<sup>")), 'class=\"abstr\"'))
affs<-affs[(grep(">Author information<", affs)+1): (grep(">Abstract<", affs)-1)]
affout<-data.frame(matrix(ncol=2, nrow=length(affs))); names(affout)<-c("index", "affiliation")
for(i in 1:length(affs)){
affout[i, 1]<-as.integer(as.numeric(unlist(strsplit(affs[i], "</sup>"))[1] ) )
affout[i, 2]<- unlist(strsplit(  unlist(strsplit(affs[i], "</sup>"))[2], "</li"  ))[1]
}
authaff<-merge(authsout, affout, by="index", all.x=TRUE)
affiliation[[x]]<-authaff
}
x
tmp<-suppressWarnings( readLines(paste0("https://www.ncbi.nlm.nih.gov/pubmed/", id[x]), encoding="UTF-8"))
tmp
length(tmp)
tmp[1]
aut<-tmp[grep("class=\"auths\">", tmp)]
tmp[1]
aut<-tmp[grep("class=\"auths\">", tm2]
library(xcms)
sesssionInfo()
sesssion.info()
session.info()
sessionInfo()
install.packages("C:/Users/cbroeckl/Downloads/MSnbase.zip", repos = NULL, type = "win.binary")
package_version('MSnbase')
packageVersion('MSnbase')
install.packages("C:/Users/cbroeckl/Downloads/MSnbase_2.4.1.tar.gz", repos = NULL, type = "source")
source("https://bioconductor.org/biocLite.R")
biocLite("MSnbase")
raw_data <- readMSData(files = filedata$files, msLevel. = 1, centroided = TRUE, mode = "onDisk")
library(MSnbase)
raw_data <- readMSData(files = filedata$files, msLevel. = 1, centroided = TRUE, mode = "onDisk")
sessionInfo()
library(xcms)
raw_data <- readMSData(files = filedata$files, msLevel. = 1, centroided = TRUE, mode = "onDisk")
sessionInfo()
biocLite("lgatto/MSnbase")
a
sessionInfo
sessionInfo()
biocLite("lgatto/MSnbase")
library("BiocInstaller")
biocLite("lgatto/MSnbase")
library(Rtools)
library(devtools)
install_github("lgatto/MSnbase")
library(devtools)
install_github("sneumann/mzR")
install.packages("Rhdf5lib")
library(Rhdf5lib)
library('Rhdf5lib')
library(devtools)
install_github("lgatto/MSnbase")
package ‘Rhdf5lib’ is not available (for R version 3.4.4)
install.packages("Rhdf5lib")
install_github("sneumann/mzR")
install.packages("Rhdf5lib")
install_github("sneumann/mzR")
library(devtools)
install_github("sneumann/mzR")
source("https://bioconductor.org/biocLite.R")
biocLite("Rhdf5lib")
library(BiocInstaller)
biocLite(c("MSnbase", "mzR"))
library(mzR)
library(MSnbase)
sessionInfo()
library(BiocInstaller)
biocLite(c("MSnbase", "mzR"))
library(MSnbase)
library(mzR)
sessionInfo
sessionInfo()
?readMSData
?BiocUpgrade
source("https://bioconductor.org/biocLite.R")
biocLite("BiocUpgrade")
source("https://bioconductor.org/biocLite.R")
biocLite("BiocUpgrade")
source("https://bioconductor.org/biocLite.R")
biocLite("BiocUpgrade")
library(mzR)
library(MSnbase)
sessionInfo()
library(Biobase)
library(Biobase)
library(BiocInstaller)
sessionInfo()
source("https://bioconductor.org/biocLite.R")
biocLite()
source("https://bioconductor.org/biocLite.R")
biocLite()
library(ff)
getOptions('fftempdir')
getOption('fftempdir')
library(roxygen2)
# build .Rd files (help)
roxygen2::roxygenise("C:/Users/cbroeckl/Documents/GitHub/RAMClustR")
args(install_github)
args(devtools::install_github)
?devtools::install_github
# after commit, must load new version
devtools::install_github("cbroeckl/RAMClustR", build_vignettes = TRUE, dependencies = FALSE)
library(devtools)
install_github("cbroeckl/RAMClustR", build_vignettes = TRUE, dependencies = FALSE)
library(RAMClustR)
?annotate
setwd("~/GitHub/RAMClustR")
install.packages("roxygen2")
library(roxygen2)
# build .Rd files (help)
roxygen2::roxygenise("C:/Users/cbroeckl/Documents/GitHub/RAMClustR")
?roxygenise
# build .Rd files (help)
roxygen2::roxygenise("C:/Users/cbroeckl/Documents/GitHub/RAMClustR")
