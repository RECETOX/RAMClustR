"featclus" = ramclustObj$featclus[tar],
"mz" = ramclustObj$fmz[tar],
"rt" = ramclustObj$frt[tar],
"int" = ramclustObj$msint[tar],
"M0_plausible" = rep(NA, length(tar))
)
if(m.check) {
for(i in 1:length(tar)) {
## check to see if there is a signal at mz - proton mass with intensity inconsistent with mz  M0 isotope
check1<-which((abs(ramclustObj$fmz - mz + 1.0078) <= mztol) & (abs(ramclustObj$frt - ramclustObj$frt[tar[i]]) <= rttol ))
if(length(check1)>0) {
negrange <- c(0.5,1.5)* (ramclustObj$msint[tar[i]]  / ((ramclustObj$fmz[tar[i]] / 14 ) * 0.011))
res1<-any(ramclustObj$msint[check1] > negrange[1] & ramclustObj$msint[check1] < negrange[2] )
} else {res1 <- FALSE}
## check to see if there is a signal at mz + proton mass with intensity inconsistent with mz  M0 isotope
check2<-which((abs(ramclustObj$fmz - mz - 1.0078) <= mztol) & (abs(ramclustObj$frt - ramclustObj$frt[tar[i]]) <= rttol ))
if(length(check1)>0) {
posrange <- c(0.5,1.5)* (ramclustObj$msint[tar[i]]  * ((ramclustObj$fmz[tar[i]] / 14 ) * 0.011))
res2<-any(ramclustObj$msint[check2] > negrange[1] & ramclustObj$msint[check2] < negrange[2] )
} else {res2 <- FALSE}
out[i, "M0_plausible"]<-!any(c(res1, res2))
}
}
}
}
out
#' findmass
#'
#' see if any features match a given mass, and whether they are plausibly M0
#' @param ramclustObj - the ramclustR object to explore
#' @param mz - numeric mz value to search for
#' @param mztol - absolute mass tolerance around mz
#' @param rttol - when examining isotope patterns, feaure retention time tolerance around features matching mz +- mztol
#' @param m.check - logical - check whether the matching masses are plausibly M0.  Looks for ions above and below the target m/z at the same time that have intensities consistent with target ion being a non-M0 isotope.
#'#' @export
findmass<-function(
ramclustObj = RC,
mz = NULL,
mztol = 0.02,
rttol = 2,
m.check = TRUE
) {
if(is.null(mz)) {stop("must set 'mz'", '\n')}
if(is.null(mztol)) {stop("must set 'mztol'", '\n')}
tar<-which(abs(ramclustObj$fmz - mz) <= mztol)
if(length (tar)==0) {
cat("no masses found within", mztol, "mz units of", mz, '\n')
} else {
out<-data.frame("featn" = tar,
"featclus" = ramclustObj$featclus[tar],
"mz" = ramclustObj$fmz[tar],
"rt" = ramclustObj$frt[tar],
"int" = ramclustObj$msint[tar],
"M0_plausible" = rep(NA, length(tar))
)
if(m.check) {
for(i in 1:length(tar)) {
## check to see if there is a signal at mz - proton mass with intensity inconsistent with mz  M0 isotope
check1<-which((abs(ramclustObj$fmz - mz + 1.0078) <= mztol) & (abs(ramclustObj$frt - ramclustObj$frt[tar[i]]) <= rttol ))
if(length(check1)>0) {
negrange <- c(0.5,1.5)* (ramclustObj$msint[tar[i]]  / ((ramclustObj$fmz[tar[i]] / 14 ) * 0.011))
res1<-any(ramclustObj$msint[check1] > negrange[1] & ramclustObj$msint[check1] < negrange[2] )
} else {res1 <- FALSE}
## check to see if there is a signal at mz + proton mass with intensity inconsistent with mz  M0 isotope
check2<-which((abs(ramclustObj$fmz - mz - 1.0078) <= mztol) & (abs(ramclustObj$frt - ramclustObj$frt[tar[i]]) <= rttol ))
if(length(check1)>0) {
posrange <- c(0.5,1.5)* (ramclustObj$msint[tar[i]]  * ((ramclustObj$fmz[tar[i]] / 14 ) * 0.011))
res2<-any(ramclustObj$msint[check2] > negrange[1] & ramclustObj$msint[check2] < negrange[2] )
} else {res2 <- FALSE}
out[i, "M0_plausible"]<-!any(c(res1, res2))
}
}
}
}
#' findmass
#'
#' see if any features match a given mass, and whether they are plausibly M0
#' @param ramclustObj - the ramclustR object to explore
#' @param mz - numeric mz value to search for
#' @param mztol - absolute mass tolerance around mz
#' @param rttol - when examining isotope patterns, feaure retention time tolerance around features matching mz +- mztol
#' @param m.check - logical - check whether the matching masses are plausibly M0.  Looks for ions above and below the target m/z at the same time that have intensities consistent with target ion being a non-M0 isotope.
#'#' @export
findmass<-function(
ramclustObj = RC,
mz = NULL,
mztol = 0.02,
rttol = 2,
m.check = TRUE
) {
if(is.null(mz)) {stop("must set 'mz'", '\n')}
if(is.null(mztol)) {stop("must set 'mztol'", '\n')}
tar<-which(abs(ramclustObj$fmz - mz) <= mztol)
if(length (tar)==0) {
stop("no masses found within", mztol, "mz units of", mz, '\n')
} else {
out<-data.frame("featn" = tar,
"featclus" = ramclustObj$featclus[tar],
"mz" = ramclustObj$fmz[tar],
"rt" = ramclustObj$frt[tar],
"int" = ramclustObj$msint[tar],
"M0_plausible" = rep(NA, length(tar))
)
if(m.check) {
for(i in 1:length(tar)) {
## check to see if there is a signal at mz - proton mass with intensity inconsistent with mz  M0 isotope
check1<-which((abs(ramclustObj$fmz - mz + 1.0078) <= mztol) & (abs(ramclustObj$frt - ramclustObj$frt[tar[i]]) <= rttol ))
if(length(check1)>0) {
negrange <- c(0.5,1.5)* (ramclustObj$msint[tar[i]]  / ((ramclustObj$fmz[tar[i]] / 14 ) * 0.011))
res1<-any(ramclustObj$msint[check1] > negrange[1] & ramclustObj$msint[check1] < negrange[2] )
} else {res1 <- FALSE}
## check to see if there is a signal at mz + proton mass with intensity inconsistent with mz  M0 isotope
check2<-which((abs(ramclustObj$fmz - mz - 1.0078) <= mztol) & (abs(ramclustObj$frt - ramclustObj$frt[tar[i]]) <= rttol ))
if(length(check1)>0) {
posrange <- c(0.5,1.5)* (ramclustObj$msint[tar[i]]  * ((ramclustObj$fmz[tar[i]] / 14 ) * 0.011))
res2<-any(ramclustObj$msint[check2] > negrange[1] & ramclustObj$msint[check2] < negrange[2] )
} else {res2 <- FALSE}
out[i, "M0_plausible"]<-!any(c(res1, res2))
}
}
}
cat(out)
}
mz
findmass(mz = 591.2811)
#' findmass
#'
#' see if any features match a given mass, and whether they are plausibly M0
#' @param ramclustObj - the ramclustR object to explore
#' @param mz - numeric mz value to search for
#' @param mztol - absolute mass tolerance around mz
#' @param rttol - when examining isotope patterns, feaure retention time tolerance around features matching mz +- mztol
#' @param m.check - logical - check whether the matching masses are plausibly M0.  Looks for ions above and below the target m/z at the same time that have intensities consistent with target ion being a non-M0 isotope.
#'#' @export
findmass<-function(
ramclustObj = RC,
mz = NULL,
mztol = 0.02,
rttol = 2,
m.check = TRUE
) {
if(is.null(mz)) {stop("must set 'mz'", '\n')}
if(is.null(mztol)) {stop("must set 'mztol'", '\n')}
tar<-which(abs(ramclustObj$fmz - mz) <= mztol)
if(length (tar)==0) {
stop("no masses found within", mztol, "mz units of", mz, '\n')
} else {
out<-data.frame("featn" = tar,
"featclus" = ramclustObj$featclus[tar],
"mz" = ramclustObj$fmz[tar],
"rt" = ramclustObj$frt[tar],
"int" = ramclustObj$msint[tar],
"M0_plausible" = rep(NA, length(tar))
)
if(m.check) {
for(i in 1:length(tar)) {
## check to see if there is a signal at mz - proton mass with intensity inconsistent with mz  M0 isotope
check1<-which((abs(ramclustObj$fmz - mz + 1.0078) <= mztol) & (abs(ramclustObj$frt - ramclustObj$frt[tar[i]]) <= rttol ))
if(length(check1)>0) {
negrange <- c(0.5,1.5)* (ramclustObj$msint[tar[i]]  / ((ramclustObj$fmz[tar[i]] / 14 ) * 0.011))
res1<-any(ramclustObj$msint[check1] > negrange[1] & ramclustObj$msint[check1] < negrange[2] )
} else {res1 <- FALSE}
## check to see if there is a signal at mz + proton mass with intensity inconsistent with mz  M0 isotope
check2<-which((abs(ramclustObj$fmz - mz - 1.0078) <= mztol) & (abs(ramclustObj$frt - ramclustObj$frt[tar[i]]) <= rttol ))
if(length(check1)>0) {
posrange <- c(0.5,1.5)* (ramclustObj$msint[tar[i]]  * ((ramclustObj$fmz[tar[i]] / 14 ) * 0.011))
res2<-any(ramclustObj$msint[check2] > negrange[1] & ramclustObj$msint[check2] < negrange[2] )
} else {res2 <- FALSE}
out[i, "M0_plausible"]<-!any(c(res1, res2))
}
}
}
print(out)
}
findmass(mz = 591.2811)
#' findmass
#'
#' see if any features match a given mass, and whether they are plausibly M0
#' @param ramclustObj - the ramclustR object to explore
#' @param mz - numeric mz value to search for
#' @param mztol - absolute mass tolerance around mz
#' @param rttol - when examining isotope patterns, feaure retention time tolerance around features matching mz +- mztol
#' @param m.check - logical - check whether the matching masses are plausibly M0.  Looks for ions above and below the target m/z at the same time that have intensities consistent with target ion being a non-M0 isotope.
#' @return returns a table to the console listing masses which match, their retention time and intensity, and whether it appears to be plausible as M0
#'#' @export
findmass<-function(
ramclustObj = RC,
mz = NULL,
mztol = 0.02,
rttol = 2,
m.check = TRUE
) {
if(is.null(mz)) {stop("must set 'mz'", '\n')}
if(is.null(mztol)) {stop("must set 'mztol'", '\n')}
tar<-which(abs(ramclustObj$fmz - mz) <= mztol)
if(length (tar)==0) {
stop("no masses found within", mztol, "mz units of", mz, '\n')
} else {
out<-data.frame("featn" = tar,
"featclus" = ramclustObj$featclus[tar],
"mz" = ramclustObj$fmz[tar],
"rt" = ramclustObj$frt[tar],
"int" = ramclustObj$msint[tar],
"M0_plausible" = rep(NA, length(tar))
)
if(m.check) {
for(i in 1:length(tar)) {
## check to see if there is a signal at mz - proton mass with intensity inconsistent with mz  M0 isotope
check1<-which((abs(ramclustObj$fmz - mz + 1.0078) <= mztol) & (abs(ramclustObj$frt - ramclustObj$frt[tar[i]]) <= rttol ))
if(length(check1)>0) {
negrange <- c(0.5,2)* (ramclustObj$msint[tar[i]]  / ((ramclustObj$fmz[tar[i]] / 17 ) * 0.011))
res1<-any(ramclustObj$msint[check1] > negrange[1] & ramclustObj$msint[check1] < negrange[2] )
} else {res1 <- FALSE}
## check to see if there is a signal at mz + proton mass with intensity inconsistent with mz  M0 isotope
check2<-which((abs(ramclustObj$fmz - mz - 1.0078) <= mztol) & (abs(ramclustObj$frt - ramclustObj$frt[tar[i]]) <= rttol ))
if(length(check1)>0) {
posrange <- c(0.5,2)* (ramclustObj$msint[tar[i]]  * ((ramclustObj$fmz[tar[i]] / 17 ) * 0.011))
res2<-any(ramclustObj$msint[check2] > negrange[1] & ramclustObj$msint[check2] < negrange[2] )
} else {res2 <- FALSE}
out[i, "M0_plausible"]<-!any(c(res1, res2))
}
}
}
print(out)
}
findmass(mz = 591.2811)
roxygen2::roxygenise()
roxygen2::roxygenise()
install_github("cbroeckl/RAMClustR", build_vignettes = TRUE)
devtools::install_github("cbroeckl/RAMClustR", build_vignettes = TRUE)
?findmass
library(RAMClustR)
?findmass
roxygen2::roxygenise()
roxygen2::roxygenise()
devtools::install_github('cbroeckl/ramclustR', build_vignette = TRUE)
detatch('package:RAMClustR')
detach('package:RAMClustR')
library(RAMClustR)
?findmass
library(RAMClustR)
?findmass
?ramclustR
??ramclustR
source('~/GitHub/RAMClustR/R/ramclustR.R')
source('~/GitHub/RAMClustR/R/do.findmain.R', encoding = 'UTF-8')
source('~/GitHub/RAMClustR/R/Params.R')
roxygen2::roxygenise()
devools::install_github('cbroeckl/RAMClustR', build_vignette = TRUE)
devtools::install_github('cbroeckl/RAMClustR', build_vignette = TRUE)
mz
ramclustObj$fmz[86]
library(xcms)
library(faahKO)
cdfpath <- system.file("cdf", package = "faahKO")
cdffiles <- list.files(cdfpath, recursive = TRUE, full.names = TRUE)
xset <- xcmsSet(cdffiles)  # detect features
xset <- group(xset)  # group features across samples by retention time and mass
xset <- retcor(xset, family = "symmetric", plottype = NULL)  # correct for drive in retention time
xset <- group(xset, bw = 10)  # regroup following rt correction
xset <- fillPeaks(xset)  # 'fillPeaks' to remove missing values in final dataset
xset
experiment <- defineExperiment(force.skip = TRUE)
RC <- ramclustR(xcmsObj = xset, ExpDes=experiment)
RC$fmz[86:87]
RC$fmz[85:87]
RC$fmz[85:89]
#' findmass
#'
#' see if any features match a given mass, and whether they are plausibly M0
#'  @details  a convenience function to perform a targeted search of all feaures for a mass of interest.  Also performs a crude plausibility check as to whether the matched feature could be M0, based on the assumption of approximately 1 carbon per 17 m/z units and natural isottopic abundance of 1.1% 13C
#'
#' @param ramclustObj - the ramclustR object to explore
#' @param mz - numeric mz value to search for
#' @param mztol - absolute mass tolerance around mz
#' @param rttol - when examining isotope patterns, feaure retention time tolerance around features matching mz +- mztol
#' @param m.check - logical - check whether the matching masses are plausibly M0.  Looks for ions above and below the target m/z at the same time that have intensities consistent with target ion being a non-M0 isotope.
#' @return returns a table to the console listing masses which match, their retention time and intensity, and whether it appears to be plausible as M0
#' @keywords 'ramclustR' 'RAMClustR', 'ramclustR', 'metabolomics', 'mass spectrometry', 'clustering', 'feature', 'xcms'
#' @author Corey Broeckling
#' @export
findmass<-function(
ramclustObj = RC,
mz = NULL,
mztol = 0.02,
rttol = 2,
m.check = TRUE
) {
if(is.null(mz)) {stop("must set 'mz'", '\n')}
if(is.null(mztol)) {stop("must set 'mztol'", '\n')}
tar<-which(abs(ramclustObj$fmz - mz) <= mztol)
if(length (tar)==0) {
stop("no masses found within", mztol, "mz units of", mz, '\n')
} else {
out<-data.frame("featn" = tar,
"featclus" = ramclustObj$featclus[tar],
"mz" = ramclustObj$fmz[tar],
"rt" = ramclustObj$frt[tar],
"int" = ramclustObj$msint[tar],
"M0_plausible" = rep(NA, length(tar))
)
if(m.check) {
for(i in 1:length(tar)) {
## check to see if there is a signal at mz - proton mass with intensity inconsistent with mz  M0 isotope
check1<-which((abs(ramclustObj$fmz - mz + 1.0078) <= mztol) & (abs(ramclustObj$frt - ramclustObj$frt[tar[i]]) <= rttol ))
if(length(check1)>0) {
negrange <- c(0.5,2)* (ramclustObj$msint[tar[i]]  / ((ramclustObj$fmz[tar[i]] / 17 ) * 0.011))
res1<-any(ramclustObj$msint[check1] > negrange[1] & ramclustObj$msint[check1] < negrange[2] )
} else {res1 <- FALSE}
## check to see if there is a signal at mz + proton mass with intensity inconsistent with mz  M0 isotope
check2<-which((abs(ramclustObj$fmz - mz - 1.0078) <= mztol) & (abs(ramclustObj$frt - ramclustObj$frt[tar[i]]) <= rttol ))
if(length(check1)>0) {
posrange <- c(0.5,2)* (ramclustObj$msint[tar[i]]  * ((ramclustObj$fmz[tar[i]] / 17 ) * 0.011))
res2<-any(ramclustObj$msint[check2] > negrange[1] & ramclustObj$msint[check2] < negrange[2] )
} else {res2 <- FALSE}
out[i, "M0_plausible"]<-!any(c(res1, res2))
}
}
}
print(out)
}
findmass(mz = RC$fmz[87])
findmass(mz = RC$fmz[86])
#' findmass
#'
#' see if any features match a given mass, and whether they are plausibly M0
#'  @details  a convenience function to perform a targeted search of all feaures for a mass of interest.  Also performs a crude plausibility check as to whether the matched feature could be M0, based on the assumption of approximately 1 carbon per 17 m/z units and natural isottopic abundance of 1.1% 13C
#'
#' @param ramclustObj - the ramclustR object to explore
#' @param mz - numeric mz value to search for
#' @param mztol - absolute mass tolerance around mz
#' @param rttol - when examining isotope patterns, feaure retention time tolerance around features matching mz +- mztol
#' @param m.check - logical - check whether the matching masses are plausibly M0.  Looks for ions above and below the target m/z at the same time that have intensities consistent with target ion being a non-M0 isotope.
#' @return returns a table to the console listing masses which match, their retention time and intensity, and whether it appears to be plausible as M0
#' @keywords 'ramclustR' 'RAMClustR', 'ramclustR', 'metabolomics', 'mass spectrometry', 'clustering', 'feature', 'xcms'
#' @author Corey Broeckling
#' @export
findmass<-function(
ramclustObj = RC,
mz = NULL,
mztol = 0.02,
rttol = 2,
m.check = TRUE
) {
if(is.null(mz)) {stop("must set 'mz'", '\n')}
if(is.null(mztol)) {stop("must set 'mztol'", '\n')}
tar<-which(abs(ramclustObj$fmz - mz) <= mztol)
if(length (tar)==0) {
stop("no masses found within", mztol, "mz units of", mz, '\n')
} else {
out<-data.frame("featn" = tar,
"featclus" = ramclustObj$featclus[tar],
"mz" = ramclustObj$fmz[tar],
"rt" = ramclustObj$frt[tar],
"int" = ramclustObj$msint[tar],
"M0_plausible" = rep(NA, length(tar))
)
if(m.check) {
for(i in 1:length(tar)) {
## check to see if there is a signal at mz - proton mass with intensity inconsistent with mz  M0 isotope
check1<-which((abs(ramclustObj$fmz - mz + 1.0078) <= mztol) & (abs(ramclustObj$frt - ramclustObj$frt[tar[i]]) <= rttol ))
if(length(check1)>0) {
negrange <- c(0.5,2)* (ramclustObj$msint[tar[i]]  / ((ramclustObj$fmz[tar[i]] / 17 ) * 0.011))
res1<-any(ramclustObj$msint[check1] > negrange[1] & ramclustObj$msint[check1] < negrange[2] )
} else {res1 <- FALSE}
## check to see if there is a signal at mz + proton mass with intensity inconsistent with mz  M0 isotope
# check2<-which((abs(ramclustObj$fmz - mz - 1.0078) <= mztol) & (abs(ramclustObj$frt - ramclustObj$frt[tar[i]]) <= rttol ))
# if(length(check1)>0) {
#   posrange <- c(0.5,2)* (ramclustObj$msint[tar[i]]  * ((ramclustObj$fmz[tar[i]] / 17 ) * 0.011))
#   res2<-any(ramclustObj$msint[check2] > negrange[1] & ramclustObj$msint[check2] < negrange[2] )
# } else {res2 <- FALSE}
out[i, "M0_plausible"]<-!res1
}
}
}
print(out)
}
findmass(mz = RC$fmz[87])
findmass(mz = RC$fmz[86])
#' findmass
#'
#' see if any features match a given mass, and whether they are plausibly M0
#'  @details  a convenience function to perform a targeted search of all feaures for a mass of interest.  Also performs a crude plausibility check as to whether the matched feature could be M0, based on the assumption of approximately 1 carbon per 17 m/z units and natural isottopic abundance of 1.1% 13C
#'
#' @param ramclustObj - the ramclustR object to explore
#' @param mz - numeric mz value to search for
#' @param mztol - absolute mass tolerance around mz
#' @param rttol - when examining isotope patterns, feaure retention time tolerance around features matching mz +- mztol
#' @param m.check - logical - check whether the matching masses are plausibly M0.  Looks for ions above and below the target m/z at the same time that have intensities consistent with target ion being a non-M0 isotope.
#' @return returns a table to the console listing masses which match, their retention time and intensity, and whether it appears to be plausible as M0
#' @keywords 'ramclustR' 'RAMClustR', 'ramclustR', 'metabolomics', 'mass spectrometry', 'clustering', 'feature', 'xcms'
#' @author Corey Broeckling
#' @export
findmass<-function(
ramclustObj = RC,
mz = NULL,
mztol = 0.02,
rttol = 2,
m.check = TRUE
) {
if(is.null(mz)) {stop("must set 'mz'", '\n')}
if(is.null(mztol)) {stop("must set 'mztol'", '\n')}
tar<-which(abs(ramclustObj$fmz - mz) <= mztol)
if(length (tar)==0) {
stop("no masses found within", mztol, "mz units of", mz, '\n')
} else {
out<-data.frame("featn" = tar,
"featclus" = ramclustObj$featclus[tar],
"mz" = ramclustObj$fmz[tar],
"rt" = ramclustObj$frt[tar],
"int" = ramclustObj$msint[tar],
"M0_plausible" = rep(NA, length(tar))
)
if(m.check) {
for(i in 1:length(tar)) {
## check to see if there is a signal at mz - proton mass with intensity inconsistent with mz  M0 isotope
check1<-which((abs(ramclustObj$fmz - mz + 1.0078) <= mztol) & (abs(ramclustObj$frt - ramclustObj$frt[tar[i]]) <= rttol ))
if(length(check1)>0) {
negrange <- c(0.5,2)* (ramclustObj$msint[tar[i]]  / ((ramclustObj$fmz[tar[i]] / 17 ) * 0.011))
out[i, "M0_plausible"]<-!any(ramclustObj$msint[check1] > negrange[1] & ramclustObj$msint[check1] < negrange[2] )
} else {out[i, "M0_plausible"] <- TRUE}
## check to see if there is a signal at mz + proton mass with intensity inconsistent with mz  M0 isotope
# check2<-which((abs(ramclustObj$fmz - mz - 1.0078) <= mztol) & (abs(ramclustObj$frt - ramclustObj$frt[tar[i]]) <= rttol ))
# if(length(check1)>0) {
#   posrange <- c(0.5,2)* (ramclustObj$msint[tar[i]]  * ((ramclustObj$fmz[tar[i]] / 17 ) * 0.011))
#   res2<-any(ramclustObj$msint[check2] > negrange[1] & ramclustObj$msint[check2] < negrange[2] )
# } else {res2 <- FALSE}
#out[i, "M0_plausible"]<-!res1
}
}
}
print(out)
}
findmass(mz = RC$fmz[87])
findmass(mz = RC$fmz[86])
unique(1:4, 3:7)
unique(c(1:4, 3:7))
findmass<-function(
ramclustObj = RC,
mz = NULL,
mztol = 0.02,
rttol = 2,
zmax = 6,
m.check = TRUE
) {
if(is.null(mz)) {stop("must set 'mz'", '\n')}
if(is.null(mztol)) {stop("must set 'mztol'", '\n')}
tar<-which(abs(ramclustObj$fmz - mz) <= mztol)
if(length (tar)==0) {
stop("no masses found within", mztol, "mz units of", mz, '\n')
} else {
out<-data.frame("featn" = tar,
"featclus" = ramclustObj$featclus[tar],
"mz" = ramclustObj$fmz[tar],
"rt" = ramclustObj$frt[tar],
"int" = ramclustObj$msint[tar],
"M0_plausible" = rep(NA, length(tar))
)
if(m.check) {
for(i in 1:length(tar)) {
## check to see if there is a signal at mz - proton mass with intensity inconsistent with mz  M0 isotope
check <- vector()
for(j in 1:zmax) {
check1<-which((abs(ramclustObj$fmz - mz + 1.007276) <= mztol) & (abs(ramclustObj$frt - ramclustObj$frt[tar[i]]) <= rttol ))
check<-unique(c(check, check1))
}
if(length(check)>0) {
negrange <- c(0.5,2)* (ramclustObj$msint[tar[i]]  / ((ramclustObj$fmz[tar[i]] / 17 ) * 0.011))
out[i, "M0_plausible"]<-!any(ramclustObj$msint[check] > negrange[1] & ramclustObj$msint[check] < negrange[2] )
} else {out[i, "M0_plausible"] <- TRUE}
## check to see if there is a signal at mz + proton mass with intensity inconsistent with mz  M0 isotope
# check2<-which((abs(ramclustObj$fmz - mz - 1.0078) <= mztol) & (abs(ramclustObj$frt - ramclustObj$frt[tar[i]]) <= rttol ))
# if(length(check1)>0) {
#   posrange <- c(0.5,2)* (ramclustObj$msint[tar[i]]  * ((ramclustObj$fmz[tar[i]] / 17 ) * 0.011))
#   res2<-any(ramclustObj$msint[check2] > negrange[1] & ramclustObj$msint[check2] < negrange[2] )
# } else {res2 <- FALSE}
#out[i, "M0_plausible"]<-!res1
}
}
}
print(out)
}
findmass(mz = RC$fmz[87])
findmass(mz = RC$fmz[86])
source('~/GitHub/RAMClustR/R/ramclustR.R')
source('~/GitHub/RAMClustR/R/do.findmain.R', encoding = 'UTF-8')
roxygen2::roxygenise()
source('~/GitHub/RAMClustR/R/ramclustR.R')
source('~/GitHub/RAMClustR/R/do.findmain.R', encoding = 'UTF-8')
source('~/GitHub/RAMClustR/R/Params.R')
RC <- do.findmain(RC, mode = "positive", mzabs.error = 0.02, ppm.error = 10)
devtools::install_github("cbroeckl/RAMClustR", build_vignettes = TRUE)
?findmass
ramclustObj = RC
mat.dir = NULL
mat.dir = NULL
rt.form.filter = TRUE
if(rt.form.filter) {
library(CHNOSZ)
}
install.packages("CHNOSZ")
if(rt.form.filter) {
require(CHNOSZ)
}
if(is.null(mat.dir)) {
mat.dir = paste0(getwd(), "/spectra/mat")
}
if(!dir.exists(mat.dir)) {
stop(paste("there is no directory called:", '\n', getwd()))
}
roxygen2::roxygenise()
roxygen2::roxygenise()
