{
    "collab_server" : "",
    "contents" : "---\ntitle: \"Use of the RAMclustR package\"\nauthor: Corey D. Broeckling\noutput: rmarkdown::html_vignette\nvignette: >\n  %\\VignetteIndexEntry{RAMClustR}\n  %\\VignetteEngine{knitr::rmarkdown}\n  \\usepackage[utf8]{inputenc}\n---\n\n```{r setup, include=FALSE}\nknitr::opts_chunk$set(echo = TRUE)\n```\n\n## Background\n### Metabolomics\nMetabolomics is frequently performed using chromatographically coupled mass spectrometry, with gas chromatography, liquid chromatography, and capillary electrophoresis being the most frequently utilized methods of separation.  The coupling of chromatography to mass spectrometry is enabled with an appropriate ionization source - electron impact (EI) for gas phase separations and electrospray ionization (ESI) for liquid phase separations. XCMS is a commonly used tool to detect all the signals from a metabolomics dataset, generating aligned features, where a feature is represented by a mass and retention time.  Each feature is presumed to derive from a single compound.  However, each compound is represented by several features.  With any ionization method, isotopic peaks will be observed reflective of the elemental composition of the analyte.  In EI, fragmentation is a byproduct of ionization, and has driven the generation of large mass spectral libraries.  In ESI, in-source fragmentation frequently occurs, the magnitude of which is compound dependent, with more labile compounds being more prone to in-source fragmentation.  ESI can also product multiple adduct forms (protonated, potassiated, sodiated, ammoniated...), and can produce multimers (i.e. [2M+H]+, [3M+K]+, etc) and multiple charged species ([M+2H]++).  This can become further complicated by considering combinations of these phenomena.  For example [2M+3H]+++ (triply charged dimer) or an in-source fragment of a dimer.\n\n\n### RAMClustR approach\nRAMClustR was designed to group features designed from the same compound using an approach which is __1.__ unsupervised, __2.__ platform agnosic, and __3.__ devoid of curated rules, as the depth of understanding of these processes is insufficent to enable accurate curation/prediction of all phenomenon that may occur.  We acheive this by making two assumptions.  The first is that two features derived from the same compound with have (approximately) the same retention time.  The second is that two features derived from the same compound will have (approximately) the same quantitative trend across all samples in the xcms sample set.  From these assumptions, we can calculate a retention time similarity score and a correlational similarity score for each feature pair.  A high similarity score for both retention time and correlation indicates a strong probability that two features derive from the same compound.  Since both conditions must be met, the product of the two similarity scores provides the best approximatio of the total similarity score - i.e. a feature pair with retention time similarity of 1 and correlational similarity of 0 is unlikely to derive from one compound - 1 x 0 = 0, the final similarity score is zero, indicating the two features represent two different compounds.  Similarly, a feature pair with retention time similarity of 0 and correlational similarity of 1 is unlikely to derive from one compound - 0 x 1 = 0.  Alternatively - a feature pair with retention time similarity of 1 and correlational similarity of 1 is likely to derive from one compound - 1 x 1 = 1.  \n\n\nThe RAMClustR algorithm is built on creating similarity scores for all pairs of features, submitting this score matrix for heirarchical clustering, and then cutting the resulting dendrogram into neat chunks using the dynamicTreeCut package - where each 'chunk' of the dendrogram results in a group of features likely to be derived from a single compound.  Importantly, this is acheived without looking for specific phenomenon (i.e. sodiation), meaning that grouping can be performed on any dataset, whether it is poisitive or negative ionization mode, EI or ESI, LC-MS GC-MS or CE-MS, in-source fragment or complex adduction event, and predictable or unpredictable signals.  \n\n## RAMClustR use: \n### XCMS input:\nWe will start with the XCMS package data.  This will take up to a few minutes to run, depending on your computer specs. \n\n```{r xcms faaKO, eval=FALSE, include=TRUE}\nlibrary(xcms)\nlibrary(faahKO)\ncdfpath <- system.file(\"cdf\", package = \"faahKO\")\ncdffiles <- list.files(cdfpath, recursive = TRUE, full.names = TRUE)\nxset <- xcmsSet(cdffiles)  # detect features\nxset <- group(xset)  # group features across samples by retention time and mass\nxset <- retcor(xset, family = \"symmetric\", plottype = NULL)  # correct for drive in retention time\nxset <- group(xset, bw = 10)  # regroup following rt correction\nxset <- fillPeaks(xset)  # 'fillPeaks' to remove missing values in final dataset\n```\n```{r view xcms object summary, eval=FALSE, include=TRUE}\nxset\n```\n\nWe can use the xset we just created as input to ramclustR.  First, we must install RAMClustR and its dependent packages:\n\n```{r ramclustR installation, eval=FALSE, include=TRUE}\ninstall.packages(\"devtools\", repos=\"http://cran.us.r-project.org\", dependencies=TRUE)\nlibrary(devtools)\ninstall_github(\"cbroeckl/RAMClustR\")\nlibrary(RAMClustR)\n```\n\nThe ramclustR function is built to use xcms data to estimate the most appropriate parameters.  As such we do not need to set too many options.  However, we do need to provide ramclustR some data for record keeping and providing instrument descriptions for spectra output. \n\n```{r ramclustR of xcms processed faaKO, eval=FALSE, include=TRUE}\nexperiment <- defineExperiment(csv = TRUE)\nRC <- ramclustR(xcmsObj = xset, ExpDes=experiment)\n```\n\n\nIn the 'defineExperiment' funciton, we can set the 'csv' value to either TRUE, FALSE, or a character string to a csv file, if you have been through the process previously.  Setting it to TRUE will enable you to open a csv written to your working directory and edit it before it is imported back into R.  setting csv=FALSE will result in two popup windows asking for input.   Once we have the experimental design data in, we can run ramclustR.  the 'experiment' object you created will now be stored with the RC object at RC$ExpDes.  \n\nThere is little visible action at the completion of the ramclustR function.  However, you should now have an RC object where each XCMS feature has been assigned to a cluster.  A document was written to a new directory called 'spectra' in your working directory.  This document will be named [your project name].msp and contains all spectra for all clusters detected.  \n\nAdditionally, the RC R object contains a new dataset called \"SpecAbund\".  You can access this dataset through the RC$SpecAbund call, and could write it to a file by calling  \n\n```{r export csv, eval=FALSE, include=TRUE}\nwrite.csv(RC$SpecAbund, file=\"SpecAbund.csv\", row.names=TRUE)\n```\n\n### csv input:\nIf you have processed your data using some other program, and can get your feature data out in csv format, ramclustR can process it. Your csv file should look like this: \n\n sample  | 123.456_45.3   |  232.423_94.1 | ...\n --------|----------------|---------------|----\n trt 1   | 19470          | 878274        | ...\n trt 2   | 13420          | 818334        | ...\n cnt 1   | 12440          | 872274        | ...\n cnt 1   | 19421          | 563244        | ...\n \nSample names in the first column.  Column names contain the mz value and the retention time in your units of choice, and these two values are separated by a delimiter, in this case and underscore \"_\".  If you also have data from an MSe experiment, you must input the data in the same format, and the column and row names must be identical.  \n\n```{r csv input, eval=FALSE, include=TRUE}\nexperiment <- defineExperiment(csv = TRUE)\nRC <- ramclustR(ms = \"mymsdata.csv\", featdelim - \"_\", timepos = 2, st = 5, ExpDes=experiment)\n```\n\n\n\n## Questions:\nCorey Broeckling  -  cbroeckl@colostate.edu\n\n\n## R Markdown\n\nThis is an R Markdown document. Markdown is a simple formatting syntax for authoring HTML, PDF, and MS Word documents. For more details on using R Markdown see <http://rmarkdown.rstudio.com>.\n\nWhen you click the **Knit** button a document will be generated that includes both content as well as the output of any embedded R code chunks within the document. You can embed an R code chunk like this:\n\n```{r cars}\nsummary(cars)\n```\n\n## Including Plots\n\nYou can also embed plots, for example:\n\n```{r pressure, echo=FALSE}\nplot(pressure)\n```\n\nNote that the `echo = FALSE` parameter was added to the code chunk to prevent printing of the R code that generated the plot.\n",
    "created" : 1506120116515.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "506799962",
    "id" : "A4A748CF",
    "lastKnownWriteTime" : 1506120128,
    "last_content_update" : 1506120128066,
    "path" : "~/GitHub/RAMClustR/vignettes/ramclustR.vignette.Rmd",
    "project_path" : "vignettes/ramclustR.vignette.Rmd",
    "properties" : {
        "last_setup_crc32" : "",
        "tempName" : "Untitled1"
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_markdown"
}